# test suite for Ghilbert verifier
# To run with the python verifier, run "python verify_test.py testsuite"

# low level syntactic stuff
!append test.gh
)
!reject test.gh Unbalanced parenthesis
!append test.gh
()
!reject test.gh List-valued command
!append test.gh
(kind wff)
!reject test.gh List-valued command

# Empty proof file is valid, if not very interesting
!append test.gh
!accept test.gh

!shared
!append test.ghi
!append test.gh
import (TEST test.ghi () "")
!end
!accept test.gh

!append test.ghi
kind
!reject test.gh kind cmd with no args

!append test.ghi
kind foo
!reject test.gh kinds must be in list

!append test.ghi
kind ()
!reject test.gh reject zero kinds

!append test.ghi
kind (bar baz)
!reject test.gh reject more than one kind

!append test.ghi
(kind wff)
!reject test.gh List-valued command in interface

!unshare

!shared
!append test.ghi
kind (wff)
kind (nat)
tvar (wff ph ps)
tvar (nat A B)
var (nat x y)
term (wff (= A B))
term (wff (-> ph ps))
term (wff (A. x ph))
term (nat (0))

stmt (19.21ai ((ph x)) ((-> ph ps)) (-> ph (A. x ps)))
stmt (ax-7 () () (-> (A. x (A. y ph)) (A. y (A. x ph))))
!append test.gh
import (TEST test.ghi () "")

tvar (wff ph ps)
var (nat x y)
tvar (nat A B)
!end
!accept test.gh

!append test.ghi
kind (wff)
!reject test.gh Redefinition of kind

# thm stuff

!append test.gh
# simple theorem that should check
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!accept test.gh

!append test.gh
thm (19.21ai ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Redefinition of thm label

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp 19.21ai)
!reject test.gh Not enough mand hyps

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x ph 19.21ai)
!reject test.gh Too many mand hyps

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. ph ps)) hyp ph 19.21ai)
!reject test.gh Mand hyp has wrong kind

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. A ps)) hyp A 19.21ai)
!reject test.gh Mand hyp has right kind, but tvar instead of binding var

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. A ps)) hyp (0) 19.21ai)
!reject test.gh Mand hyp has right kind, but term instead of binding var

!append test.gh
thm (19.21ai2 () (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Missing free var condition

# This one might be too strict
!append test.gh
thm (19.21ai2 ((ph x y)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Spurious free var condition

!append test.gh
thm (19.21ai2 (()) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Malformed free var clause

!append test.gh
thm (19.21ai2 (ph) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Malformed free var clause

!append test.gh
thm (19.21ai2 (((ph) x)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Malformed free var clause

!append test.gh
thm (19.21ai2 ((ph (x))) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Malformed free var clause

# This one might be too strict
!append test.gh
thm (19.21ai2 ((x ph)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Wrong order in free var clause

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Arity error in hyp

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps ph)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Arity error in hyp

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph A)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Kind error in hyp

!append test.gh
thm (19.21ai2 ((ph x)) (hyp ph) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Unification error in hyp

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (A. x ph)) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Unification error in hyp

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) x 19.21ai)
!reject test.gh Stack underflow

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp hyp x 19.21ai)
!reject test.gh Too many terms on stack

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) hyp x 19.21ai x)
!reject test.gh Leftover mand hyp on stack

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ph)) hyp x 19.21ai)
!reject test.gh Stack doesn't match concl

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph baz)) (-> ph (A. x baz)) hyp x 19.21ai)
!reject test.gh Variable in hyp doesn't exist

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps) hyp2 baz) (-> ph (A. x ps)) hyp x 19.21ai)
!reject test.gh Variable in hyp doesn't exist

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) (hyp x 19.21ai))
!reject test.gh Extra parens around proof - poorly formed

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)))
!reject test.gh Missing parts of thm

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)))
!reject test.gh Missing parts of thm

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) ((->) ph ps))
!reject test.gh Malformed term in proof step

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) (() ph ps))
!reject test.gh Malformed term in proof step

!append test.gh
thm (19.21ai2 ((ph x)) (hyp (-> ph ps)) (-> ph (A. x ps)) ())
!reject test.gh Malformed term in proof step

!append test.gh
thm (ax-7_2 () () (-> (A. x (A. y ph)) (A. y (A. x ph))) x y ph ax-7)
!accept test.gh

!append test.gh
thm (ax-7_2 () () (-> (A. x (A. x ph)) (A. x (A. x ph))) x x ph ax-7)
!reject test.gh Binding variables not distinct

!unshare

!shared
!append test.ghi
kind (wff)
kind (nat)
tvar (wff ph ps)
tvar (nat A B)
var (nat x y)
term (wff (= A B))
term (wff (-> ph ps))
term (wff (A. x ph))
term (nat (0))

stmt (19.21ai ((ph x)) ((-> ph ps)) (-> ph (A. x ps)))
stmt (ax-7 () () (-> (A. x (A. y ph)) (A. y (A. x ph))))

term (nat (+ A B))
stmt (alnfi ((ph x)) () (-> ph (A. x ph)))
term (wff (-. ph))
term (wff (<-> ph ps))
stmt (id () () (-> ph ph))
stmt (biid () () (<-> ph ph))
stmt (preandi () (ph ps) (-. (-> ph (-. ps))))
!append test.gh
import (TEST test.ghi () "")

tvar (wff ph ps)
var (nat x y)
tvar (nat A B)
!end
!accept test.gh

!append test.gh
thm (bleep () () (-> (A. x (A. (+ x y) ph)) (A. (+ x y) ph))
     x (A. (+ x y) ph) ax-4)
!reject test.gh Term expression substituted for term binding var argument

!append test.gh
thm (bleep2 () () (-> (A. x (A. B ph)) (A. B ph))
     x (A. B ph) ax-4)
!reject test.gh Term variable substituted for term binding var argument

!append test.gh
thm (bleep3 () () (-> ph ph)
     ph A alnfi)
!reject test.gh Term variable substituted for mandatory binding variable

!append test.gh
thm (bleep4 () () (-> ph ph)
     ph (+ x y) alnfi)
!reject test.gh Term expression substituted for mandatory binding variable

!append test.gh
defthm (df-an wff (/\ ph ps) () ()
          (-. (-> (-> (/\ ph ps) (-. (-> ph (-. ps))))
                  (-. (-> (-. (-> ph (-. ps))) (/\ ph ps)))))
        (-. (-> ph (-. ps))) id
        (-. (-> ph (-. ps))) id
        preandi)
!accept test.gh

!append test.gh
defthm (df-true wff (true) () () (true)
        ph id)
!reject test.gh Definition dummy is not binding variable

!append test.gh
defthm (df-eqvar wff (=var x y) () () (<-> (=var x y) (= x y))
  (= x y) biid
)
!reject test.gh Defined term has two binding variable arguments of the same kind

!unshare

!append in.ghi
kind (formula)
tvar (formula p q)
term (formula (→ p q))
stmt (AntecedentIntroduction () () (→ p (→ q p)))
!append out.ghi
kind (formula)
tvar (formula p q)
term (formula (→ p q))
stmt (AntecedentIntroduction () () (→ q (→ p q)))
!append test.gh
import (IN in.ghi () "")
tvar (formula p q)
export (OUT out.ghi () "")
!accept test.gh

# Tests of name prefixing on import
!shared
!append in.ghi
kind (formula)
tvar (formula p q)
term (formula (→ p q))
stmt (AntecedentIntroduction () () (→ p (→ q p)))
!end
!append test.gh
import (IN in.ghi () "foo.")
tvar (foo.formula p q)
thm (foo () () (foo.→ p (foo.→ q p)) p q foo.AntecedentIntroduction)
!accept test.gh
!append test.gh
import (IN in.ghi () "foo.")
tvar (formula p q)
!reject test.gh Kind not known: formula
!append test.gh
import (IN in.ghi () "foo.")
tvar (foo.formula p q)
thm (foo () () (→ p (foo.→ q p)) p q foo.AntecedentIntroduction)
!reject test.gh term → not known
!append test.gh
import (IN in.ghi () "foo.")
tvar (foo.formula p q)
thm (foo () () (foo.→ p (foo.→ q p)) p q AntecedentIntroduction)
!reject test.gh unknown proof step: AntecedentIntroduction

# kindbind in proof modules
!shared
!append kinds.ghi
kind (formula)
kind (natural)
tvar (formula p r)
tvar (natural n k)
term (formula (→ p r))
term (natural (+ n k))
stmt (repeat () (p) p)
stmt (id () () (→ p p))
!append test.gh
import (IN kinds.ghi () "")
!end

!append test.gh
kindbind (formula wff)
!accept test.gh
!append test.gh
kindbind (foobar wff)
!reject test.gh Kind not known: foobar
!append test.gh
kindbind (formula natural)
!reject test.gh Kind nat already defined

# can use a variable where one of another (bound) kind is expected
!append test.gh
kindbind (formula wff)
tvar (wff q)
thm (repeat2 () (H q) q
  H
  repeat)
!accept test.gh
# Here's a kind-checking test
!append test.gh
kindbind (formula wff)
kindbind (natural nat)
tvar (nat n)
thm (repeat2 () (H n) n
  H
  repeat)
!reject test.gh kind mismatch: n wanted formula found nat
# Similar, but with a term which is not just a variable
!append test.gh
kindbind (natural nat)
tvar (nat i j)
thm (repeat2 () (H (+ i j)) (+ i j)
  H
  repeat)
!reject test.gh kind mismatch: (+ i j) wanted formula found nat
# cannot use a variable declared with kindbound kind for another kind
!append test.gh
kindbind (natural nat)
tvar (nat n)
thm (repeat2 () (H n) n
  H
  repeat)
!reject test.gh

# similar for mandatory hypotheses: first, able to use kindbound kind
!append test.gh
kindbind (formula wff)
tvar (wff q)
thm (id2 () () (→ q q)
  q id
)
!accept test.gh
# Here's a kind-checking test
!append test.gh
kindbind (formula wff)
kindbind (natural nat)
tvar (nat n)
thm (id2 () () (→ n n)
  n id
)
!reject test.gh
# cannot use a variable declared with kindbound kind for another kind
!append test.gh
kindbind (natural nat)
tvar (nat n)
thm (id2 () () (→ n n)
  n id
)
!reject test.gh

# kindbind in interfaces
!shared
!append kinds.ghi
kind (formula)
kindbind (formula wff)
kind (natural)
kindbind (natural nat)
tvar (formula p r)
tvar (nat n k)
term (formula (→ p r))
term (nat (+ n k))
stmt (repeat () (p) p)
stmt (id () () (→ p p))
!append test.gh
import (IN kinds.ghi () "")
!end

#!accept test.gh
!reject test.gh kindbind is not (yet at least) allowed in interfaces

!append test.gh
tvar (wff q)
thm (repeat2 () (H q) q
  H
  repeat)
#!accept test.gh
!reject test.gh kindbind is not (yet at least) allowed in interfaces

# Similar, but with a term which is not just a variable
!append test.gh
kindbind (natural nat)
tvar (nat i j)
thm (repeat-ij () (H (+ i j)) (+ i j)
  H
  repeat)
!reject test.gh kind mismatch: (+ i j) wanted formula found nat

!append test.gh
tvar (nat n)
thm (repeat-n () (H n) n
  H
  repeat
)
!reject test.gh kind mismatch: n wanted formula found natural

!append kinds.ghi
kindbind (foobar foo)
!reject test.gh Kind not known: foobar

!append kinds.ghi
kindbind (formula natural)
!reject test.gh A kind natural is already visible in the current import export context

# similar for mandatory hypotheses: first, able to use kindbound kind
!append test.gh
tvar (wff q)
thm (id2 () () (→ q q)
  q id
)
#!accept test.gh
!reject test.gh kindbind is not (yet at least) allowed in interfaces

# Here's a kind-checking test
!append test.gh
tvar (nat n)
thm (id2 () () (→ n n)
  n id
)
!reject test.gh
# cannot use a variable declared with kindbound kind for another kind
!append test.gh
tvar (nat n)
thm (id2 () () (→ n n)
  n id
)
!reject test.gh

# export
# first test is fairly simple, just import a file and then export the same one
!append test.gh
export (OUT kinds.ghi () "")
#!accept test.gh
!reject test.gh kindbind is not (yet at least) allowed in interfaces

# attempt to export without defining a kindbound kind name
!append out.ghi
kind (formula)
kindbind (formula exportname)
!append test.gh
export (OUT out.ghi () "")
!reject test.gh kind not known: exportname

# attempt to export and kindbind to the wrong types
!append out.ghi
kind (formula)
kindbind (formula nat)
kind (natural)
kindbind (natural wff)
!append test.gh
export (OUT out.ghi () "")
!reject test.gh kind nat should be bound to formula but is bound to natural

# an export kind-checking test which does not involve kindbind
!unshare
!append out.ghi
kind (formula)
kind (foo)
tvar (formula p q)
term (formula (* p q))
!append in.ghi
kind (formula)
kind (foo)
tvar (foo p q)
term (foo (* p q))
!append test.gh
import (IN in.ghi () "")
export (OUT out.ghi () "")
!reject test.gh Term * is of kind foo but verify context term * is of kind formula

# test that terms consistently dereference kindbinds
!unshare
!append kinds.ghi
kind (formula)
kindbind (formula wff)
tvar (wff p q)
term (wff (→ p q))
stmt (repeat () (p) p)
stmt (id () () (→ p p))
!append test.gh
import (IN kinds.ghi () "")
export (OUT kinds.ghi () "")
#!accept test.gh
!reject test.gh kindbind is not (yet at least) allowed in interfaces

# export and freeness
!shared
!append in.ghi
kind (formula)
tvar (formula p q φ ψ)
term (formula (→ p q))
term (formula (↔ p q))
stmt (BiconditionalReflexivity () () (↔ p p))
kind (object)
var (object x y)
term (formula (∀ x φ))
!append test.gh
import (IN in.ghi () "")
!append out.ghi
kind (formula)
tvar (formula p q φ ψ)
kind (object)
var (object x y)
!end

!append out.ghi
term (formula (foo x φ))
!append test.gh
tvar (formula p q φ ψ)
var (object x y)
defthm (df-foo formula (foo x φ) () () (↔ (foo x φ) (→ φ (∀ x φ)))
        (→ φ (∀ x φ)) BiconditionalReflexivity
)
export (OUT out.ghi () "")
!reject test.gh Term freemap mismatch with verify context for foo

# Import a statement (with hypotheses), and then export it unchanged.
!unshare
!append in.ghi
kind (formula)
tvar (formula p)
stmt (foo () (p) p)
!append out.ghi
kind (formula)
tvar (formula φ)
stmt (foo () (φ) φ)
!append test.gh
import (IN in.ghi () "")
export (OUT out.ghi () "")
!accept test.gh

# Freemaps and terms
!shared
!append in.ghi
kind (formula)
tvar (formula p q φ)
term (formula (∧ p q))
term (formula (↔ p q))

kind (object)
tvar (object s t A B C)
var (object x y)

term (formula (∀ x φ))
stmt (ForAllReflexivity () () (↔ (∀ x φ) (∀ x φ)))

term (formula (subst s x φ) (x s))
term (formula (= s t))
stmt (SubstReflexivity () () (= (subst s x φ) (subst s x φ)))

term (object (separate x A φ) (x A))
stmt (SeparateReflexivity () () (= (separate x A φ) (separate x A φ)))
!append test.gh
import (IN in.ghi () "")
!end

!accept test.gh

# This looks like something the verifier isn't catching yet...
#!append in.ghi
#stmt (KindMismatch () () (= (separate x φ φ) (separate x φ φ)))
#!reject test.gh

!append in.ghi
stmt (ExpectedBindingGotTerm () () (= (separate A A φ) (separate A A φ)))
!reject test.gh

