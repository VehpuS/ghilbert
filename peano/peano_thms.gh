# Building up theorems of peano arithmetic.

# until param is working...
#import (COMBINED combined.ghi () "")

import (PROP prop.ghi () "")
import (PEANO_MIN peano_min.ghi (PROP) "")

kindbind (num nat)

tvar (wff ph ps ch th ta)
tvar (nat A B C D A' B' C')
var (nat v w x y z v' w' x' y' z')

# Pure predicate calculus

thm (a4i ()
  (hyp (A. x ph))
  ph
  hyp x ph ax-4 ax-mp
)

thm (mpg ()
  (hyp1 (-> (A. x ph) ps)
   hyp2 ph)
  ps
  hyp2 x gen hyp1 ax-mp
)

thm (19.3 ((ph x))
  ()
  (<-> (A. x ph) ph)
  x ph ax-4 ph x alnfi impbii
)

defthm (df-ex wff (E. x ph) () () (<-> (E. x ph) (-. (A. x (-. ph))))
     (-. (A. x (-. ph))) biid)

# aka 19.7
thm (alnex () ()
  (<-> (A. x (-. ph)) (-. (E. x ph)))
  x ph df-ex con2bii
)

thm (19.8a () ()
  (-> ph (E. x ph))
  x (-. ph) ax-4 con2i
  x ph df-ex sylibr
)

thm (19.2 () ()
  (-> (A. x ph) (E. x ph))
  x ph ax-4 ph x 19.8a syl
)

thm (19.9 ((ph x))
  ()
  (<-> (E. x ph) ph)

  x (-. ph) 19.3
  x ph alnex bitr3i con4bii bicomi
)

thm (19.15 () ()
  (-> (A. x (<-> ph ps)) (<-> (A. x ph) (A. x ps)))

  ph ps bi1 x gen
  x (<-> ph ps) (-> ph ps) ax-alim ax-mp
  x ph ps ax-alim syl

    ph ps bi2 x gen
    x (<-> ph ps) (-> ps ph) ax-alim ax-mp
    x ps ph ax-alim syl
  impbid
)

thm (19.15i ()
  (hyp (A. x (<-> ph ps)))
  (<-> (A. x ph) (A. x ps))
  hyp x ph ps 19.15 ax-mp)

thm (19.15d () (H1 (-> ph (A. x (<-> ps ch)))) 
      (-> ph (<-> (A. x ps) (A. x ch)))
     H1 x ps ch 19.15 syl)

thm (albii ()
  (hyp (<-> ph ps))
  (<-> (A. x ph) (A. x ps))
  hyp x gen 19.15i)

# aka 19.6
thm (alex () ()
  (<-> (A. x ph) (-. (E. x (-. ph))))
  ph notnot x albii
  x (-. ph) df-ex con2bii bitri
)

thm (19.20i ()
  (hyp (-> ph ps))
  (-> (A. x ph) (A. x ps))
  hyp x gen x ph ps ax-alim ax-mp)

thm (19.21 ((ph x))
  ()
  (<-> (A. x (-> ph ps)) (-> ph (A. x ps)))

  x ph ps ax-alim ph x alnfi syl5
    (-> ph (A. x ps)) x alnfi
      x ps ax-4
      ph imim2i
      x 19.20i
    syl
  impbii
)

thm (19.21ai ((ph x))
  (hyp (-> ph ps))
  (-> ph (A. x ps))
  ph x alnfi hyp x 19.20i syl
)

thm (19.5 () ()
  (<-> (A. x (A. y ph)) (A. y (A. x ph)))
  x (A. y ph) ax-4 y ph ax-4 syl x 19.21ai y 19.21ai
    y (A. x ph) ax-4 x ph ax-4 syl y 19.21ai x 19.21ai
  impbii
)

thm (19.22 () ()
  (-> (A. x (-> ph ps)) (-> (E. x ph) (E. x ps)))

  ph ps con34b x albii
    x (-. ps) (-. ph) ax-alim sylbi con3d
    x ph df-ex x ps df-ex imbi12i sylibr
)

thm (19.22i ()
  (hyp (-> ph ps))
  (-> (E. x ph) (E. x ps))
  hyp x gen x ph ps 19.22 ax-mp)

thm (19.22d ((ph x))
  (hyp (-> ph (-> ps ch)))
  (-> ph (-> (E. x ps) (E. x ch)))
  hyp x 19.21ai x ps ch 19.22 syl
)

thm (19.18 () ()
  (-> (A. x (<-> ph ps)) (<-> (E. x ph) (E. x ps)))
  ph ps bi1 x 19.20i x ph ps 19.22 syl
    ph ps bi2 x 19.20i x ps ph 19.22 syl
  impbid
)

thm (exbii ()
  (hyp (<-> ph ps))
  (<-> (E. x ph) (E. x ps))
  x ph ps 19.18 hyp mpg
)

thm (exbid ((ph x))
  (hyp (-> ph (<-> ps ch)))
  (-> ph (<-> (E. x ps) (E. x ch)))
  hyp x 19.21ai x ps ch 19.18 syl
)

thm (19.29 () ()
  (-> (/\ (A. x ph) (E. x ps)) (E. x (/\ ph ps)))
  x ph (-. ps) ax-alim
    x ps alnex
  syl6ib
  con3i
    (A. x ph) (E. x ps) df-an
      x (-> ph (-. ps)) alex con2bii
  3imtr4i
    ph ps df-an x exbii
  sylibr
)

thm (19.32 ((ph x))
  ()
  (<-> (A. x (\/ ph ps)) (\/ ph (A. x ps)))

  x (-. ph) ps 19.21
    ph ps df-or x albii
      ph (A. x ps) df-or
  3bitr4i
)

thm (19.31 ((ps x))
  ()
  (<-> (A. x (\/ ph ps)) (\/ (A. x ph) ps))

  x ps ph 19.32
  ph ps orcom x albii
  (A. x ph) ps orcom
  3bitr4i
)

thm (19.23 ((ps x))
  ()
  (<-> (A. x (-> ph ps)) (-> (E. x ph) ps))

  ph ps imor x albii
  x (-. ph) ps 19.31 bitri
  x ph alnex ps orbi1i bitri
  (E. x ph) ps imor bitr4i
)

thm (19.23ai ((ps x))
  (hyp (-> ph ps))
  (-> (E. x ph) ps)
  hyp x 19.22i
  x ps 19.9 sylib
)

thm (19.41 ((ps x)) ()
  (<-> (E. x (/\ ph ps)) (/\ (E. x ph) ps))
  x (/\ ph ps) df-ex
    x (-. ph) (-. ps) 19.31
      ph ps ianor x albii
        (E. x ph) ps ianor x ph alnex (-. ps) orbi1i bitr4i
    3bitr4i con2bii
  bitr4i
)

# Predicate calculus with equality

thm (tyex ((A x)) ()
  (E. x (= x A))
  x A ax-tyex
  x (= x A) df-ex mpbir
)

thm (vtocle ((A x) (ph x))
  (hyp (-> (= x A) ph))
  ph

  x A tyex hyp x 19.23ai ax-mp
)

thm (eqid () ()
  (= A A)
  x A A ax-eqtr anidms vtocle
)

thm (eqcom () ()
  (<-> (= A B) (= B A))
  A eqid A B A ax-eqtr mpan2
    B eqid B A B ax-eqtr mpan2
  impbii
)

thm (eqcomi ()
  (hyp (= A B))
  (= B A)
  hyp A B eqcom mpbi)

thm (eqcomd ()
  (hyp (-> ph (= A B)))
  (-> ph (= B A))
  hyp A B eqcom sylib)

thm (eqcoms ()
  (hyp (-> (= A B) ph))
  (-> (= B A) ph)
  B A eqcom hyp sylbi
)

thm (eqeq1 () ()
  (-> (= A B) (<-> (= A C) (= B C)))
  A B C ax-eqtr ex
    B A C ax-eqtr ex eqcoms
  impbid
)

thm (eqeq2 () ()
  (-> (= A B) (<-> (= C A) (= C B)))
  A B C eqeq1
    A C eqcom B C eqcom bibi12i
  sylib
)

thm (eqeq1i ()
  (hyp (= A B))
  (<-> (= A C) (= B C))
  hyp A B C eqeq1 ax-mp)

thm (eqeq1d ()
  (hyp (-> ph (= A B)))
  (-> ph (<-> (= A C) (= B C)))
  hyp A B C eqeq1 syl)

thm (eqeq2i ()
  (hyp (= A B))
  (<-> (= C A) (= C B))
  hyp A B C eqeq2 ax-mp)

thm (eqeq2d ()
  (hyp (-> ph (= A B)))
  (-> ph (<-> (= C A) (= C B)))
  hyp A B C eqeq2 syl)

thm (eqeq12i ()
  (hyp1 (= A B)
   hyp2 (= C D))
  (<-> (= A C) (= B D))
  hyp1 A B C eqeq1 ax-mp hyp2 C D B eqeq2 ax-mp bitri
)

thm (eqeq12d ()
  (hyp1 (-> ph (= A B))
   hyp2 (-> ph (= C D)))
  (-> ph (<-> (= A C) (= B D)))
  hyp1 C eqeq1d
  hyp2 B eqeq2d bitrd
)

thm (eqtr3 ()
  (hyp1 (= A B)
   hyp2 (= A C))
  (= B C)
  hyp1 hyp2 A B C ax-eqtr mp2an
)

thm (eqtr ()
  (hyp1 (= A B)
   hyp2 (= B C))
  (= A C)
  hyp1 eqcomi hyp2 eqtr3
)

thm (eqtr4 ()
  (hyp1 (= A B)
   hyp2 (= C B))
  (= A C)
  hyp1 hyp2 eqcomi eqtr
)

thm (eqtrd ()
  (hyp1 (-> ph (= A B))
   hyp2 (-> ph (= B C)))
  (-> ph (= A C))
  hyp1 hyp2 A eqeq2d mpbid
)

thm (syl5eq ()
  (hyp1 (-> ph (= A B))
   hyp2 (= C A))
  (-> ph (= C B))
  hyp2 ph a1i hyp1 eqtrd
)

thm (syl5eqr ()
  (hyp1 (-> ph (= A B))
   hyp2 (= A C))
  (-> ph (= C B))
  hyp2 eqcomi ph a1i hyp1 eqtrd
)

thm (syl6eq ()
  (hyp1 (-> ph (= A B))
   hyp2 (= B C))
  (-> ph (= A C))
  hyp1 hyp2 ph a1i eqtrd
)

thm (syl6eqr ()
  (hyp1 (-> ph (= A B))
   hyp2 (= C B))
  (-> ph (= A C))
  hyp1 hyp2 eqcomi ph a1i eqtrd
)

thm (sylan9eq ()
  (hyp1 (-> ph (= A B))
   hyp2 (-> ps (= B C)))
  (-> (/\ ph ps) (= A C))
  hyp1 ps adantr
    hyp2 ph adantl
  eqtrd
)

thm (3eqtr4g ()
  (hyp1 (-> ph (= A B))
   hyp2 (= C A)
   hyp3 (= D B))
  (-> ph (= C D))
  hyp1 hyp2 syl5eq hyp3 syl6eqr
)

thm (vtocl ((A x) (ps x))
  (hyp1 (-> (= x A) (<-> ph ps))
   hyp2 ph)
  ps

  hyp2 hyp1 mpbii vtocle
)

thm (ceqsal ((A x) (ps x))
  (hyp (-> (= x A) (<-> ph ps)))
  (<-> (A. x (-> (= x A) ph)) ps)

  hyp pm5.74i x albii
  x (= x A) ps 19.23 bitri
  x A tyex ps a1bi bitr4i
)

thm (substex ((ph x y) (ps y) (ch x) (A y))
  (hyp (-> (/\ ph (/\ (= y A) ps)) ch))
  (-> (/\ ph (E. x ps)) (E. y ch))

  hyp ex y 19.21ai
    y (/\ (= y A) ps) ch 19.22
  y (= y A) ps 19.41 y A tyex mpbiran syl5ibr syl
  x 19.21ai 
  x ps (E. y ch) 19.23 sylib imp
)

thm (ex6 () () (-> (E. x ph) (A. x (E. x ph)))
     x ph df-ex
       x (-. ph) ax-6
     sylbi
       x ph df-ex x albii
     sylibr)

thm (axex () () (<-> (A. x (E. x ph)) (E. x ph))
     x (E. x ph) ax-4
     x ph ex6
     impbii)

thm (exax1 () () (-> (E. x (A. x ph)) (A. x ph))
     x (A. x ph) df-ex
       x ph ax-6 con1i
     sylbi)

thm (exax () () (<-> (E. x (A. x ph)) (A. x ph))
     x ph exax1
     (A. x ph) x 19.8a
     impbii)

thm (exax1d () (1 (-> ph (E. x (A. x ps)))) (-> ph (A. x ps))
     1 x ps exax1 syl)

# Version of ax-11 using E.
#thm (ex11 () () (-> (= x y) (-> (E. x (/\ (= x y) ph)) (E. y ph)))
#     x y (-. ph) ax-11
#       y ph alnex biimpri
#     syl5
#       x (-> (= x y) (-. ph)) alex biimpi
#     syl6 con4d
#       (= x y) ph df-an x exbii biimpi
#     syl5)


thm (eximp1 () () (-> (E. x (-> ph ps)) (-> (A. x ph) (E. x ps)))
     ph ps pm2.27 x 19.20i
       x (-> ph ps) ps 19.22
     syl com12)

thm (eximp1d () (1 (-> ph (E. x (-> ps ch)))) (-> ph (-> (A. x ps) (E. x ch)))
     1 x ps ch eximp1 syl)

thm (mpexax () () (-> (E. x ph) (-> (A. x (-> ph ps)) (E. x ps)))
     ph ps pm2.27 x 19.22i eximp1d
     )
thm (mpexaxp () () (-> (E. x ph) (-> (A. x (-> ph ps)) (E. x (/\ ph ps))))
     x ph (/\ ph ps) mpexax
       ph ps ancl x 19.20i
     syl5
     )

thm (sbaxex () () (-> (A. x (-> (= x y) ph)) (E. x (/\ (= x y) ph)))
     x y tyex
       x (= x y) ph mpexaxp
     ax-mp)

thm (sbaxexd () (1 (-> ph (A. x (-> (= x y) ps))))
        (-> ph (E. x (/\ (= x y) ps)))
     1 x y ps sbaxex syl)

thm (exlem1 ((ph x)) () (-> (E. x ph) (E. x (/\ (= x y) ph)))
     ph x alnfi
       ph (= x y) ax-1 x 19.20i
     syl x 19.22i exax1d sbaxexd)

thm (exalpha1 ((ph y) (ps x)) (1 (-> (= x y) (-> ph ps)))
     (-> (E. x ph) (E. y ps))
     y x eqcom 1 sylbi com12 y 19.21ai
       y x tyex
         y (= y x) ps mpexax
       ax-mp
     syl x 19.23ai)

thm (exalpha ((ph y) (ps x)) (1 (-> (= x y) (<-> ph ps)))
     (<-> (E. x ph) (E. y ps))
    1 biimpd exalpha1
    y x eqcom 1 sylbi biimprd exalpha1
    impbii)

# Peano arithmetic

defthm (df-1 num (1) () () (= (1) (S (0)))
        (S (0)) eqid)


thm (addeq1 () ()
  (-> (= A B) (= (+ A C) (+ B C)))
  C eqid A B C C addeq12 mpan2)

thm (addeq2 () ()
  (-> (= A B) (= (+ C A) (+ C B)))
  C eqid C C A B addeq12 mpan)

thm (df-le-just ((A x) (B x) (A y) (B y)) ()
       (<-> (E. x (= (+ A x) B)) (E. y (= (+ A y) B)))
      x y A addeq2 B eqeq1d exalpha)

# Definition of less than or equal to.
defthm (df-le wff (<= A B) ((A x) (B x)) ()
        (<-> (<= A B) (E. x (= (+ A x) B)))
        # WTS (<-> (E. y (= (+ A y) B)) (E. x (= (+ A x) B)))
        y A B x df-le-just)

defthm (df-lt wff (< A B) () () (<-> (< A B) (/\ (<= A B) (-. (= A B))))
        (/\ (<= A B) (-. (= A B))) biid)

thm (addeq12i ()
  (hyp1 (= A B)
   hyp2 (= C D))
  (= (+ A C) (+ B D))
  hyp1 hyp2 A B C D addeq12 mp2an
)

thm (addeq1d ()
  (hyp (-> ph (= A B)))
  (-> ph (= (+ A C) (+ B C)))
  hyp C eqid A B C C addeq12 mpan2 syl
)

thm (addeq12d ()
  (hyp1 (-> ph (= A B))
   hyp2 (-> ph (= C D)))
  (-> ph (= (+ A C) (+ B D)))
  hyp1 hyp2 jca A B C D addeq12 syl
)

thm (addeq1i ()
  (hyp (= A B))
  (= (+ A C) (+ B C))
  hyp C eqid A B C C addeq12 mp2an
)

thm (addeq2i ()
  (hyp (= A B))
  (= (+ C A) (+ C B))
  C eqid hyp C C A B addeq12 mp2an
)

thm (muleq1 () ()
  (-> (= A B) (= (* A C) (* B C)))
  C eqid A B C C muleq12 mpan2)

thm (muleq2 () ()
  (-> (= A B) (= (* C A) (* C B)))
  C eqid C C A B muleq12 mpan)

thm (muleq12i ()
  (hyp1 (= A B)
   hyp2 (= C D))
  (= (* A C) (* B D))
  hyp1 hyp2 A B C D muleq12 mp2an
)

thm (muleq1d ()
  (hyp (-> ph (= A B)))
  (-> ph (= (* A C) (* B C)))
  hyp C eqid A B C C muleq12 mpan2 syl
)

thm (muleq1i ()
  (hyp (= A B))
  (= (* A C) (* B C))
  hyp C eqid A B C C muleq12 mp2an
)

thm (suceqd ()
  (hyp (-> ph (= A B)))
  (-> ph (= (S A) (S B)))
  hyp A B pa_ax2 sylib)

thm (finds ((A x) (ch x) (th x) (ta x) (ph y))
  (hyp1 (-> (= x (0)) (<-> ph ps))
   hyp2 (-> (= x y) (<-> ph ch))
   hyp3 (-> (= x (S y)) (<-> ph th))
   hyp4 (-> (= x A) (<-> ph ta))
   hyp5 ps
   hyp6 (-> ch th))
  ta

  hyp4
    hyp5 hyp1 mpbiri x gen
      hyp6
        hyp2 ceqsal
          hyp3 ceqsal
      3imtr4i y gen
    x ph y pa_ind mp2an
    a4i
  vtocl
)

thm (pa_ax3r () ()
  (= (+ (0) A) A)

  x (0) (0) addeq2 (= x (0)) id eqeq12d
    x y (0) addeq2 (= x y) id eqeq12d
      x (S y) (0) addeq2 (= x (S y)) id eqeq12d
        x A (0) addeq2 (= x A) id eqeq12d
          (0) pa_ax3
            (+ (0) y) y pa_ax2
              (0) y pa_ax4 (S y) eqeq1i
            bitr4i biimpi
  finds
)

thm (pa_ax4r () ()
  (= (+ (S A) B) (S (+ A B)))

  x (0) (S A) addeq2 x (0) A addeq2 suceqd eqeq12d
    x y (S A) addeq2 x y A addeq2 suceqd eqeq12d
      x (S y) (S A) addeq2 x (S y) A addeq2 suceqd eqeq12d
        x B (S A) addeq2 x B A addeq2 suceqd eqeq12d

          (S A) pa_ax3 A pa_ax3 (+ A (0)) A pa_ax2 mpbi eqtr4

            (+ (S A) y) (S (+ A y)) pa_ax2 biimpi
              A y pa_ax4 (+ A (S y)) (S (+ A y)) pa_ax2 mpbi
            syl6eqr
              (S A) y pa_ax4
             syl5eq

  finds
)

thm (addcom () ()
  (= (+ A B) (+ B A))

  x (0) B addeq1 x (0) B addeq2 eqeq12d
    x y B addeq1 x y B addeq2 eqeq12d
      x (S y) B addeq1 x (S y) B addeq2 eqeq12d
        x A B addeq1 x A B addeq2 eqeq12d

          B pa_ax3r B pa_ax3 eqtr4

            (+ y B) (+ B y) pa_ax2 biimpi
            y B pa_ax4r syl5eq
            B y pa_ax4 syl6eqr

  finds
)

thm (addass () ()
  (= (+ (+ A B) C) (+ A (+ B C)))

  x (0) B addeq1 C addeq1d x (0) (+ B C) addeq1 eqeq12d
    x y B addeq1 C addeq1d x y (+ B C) addeq1 eqeq12d
      x (S y) B addeq1 C addeq1d x (S y) (+ B C) addeq1 eqeq12d
        x A B addeq1 C addeq1d x A (+ B C) addeq1 eqeq12d

          B pa_ax3r C addeq1i (+ B C) pa_ax3r eqtr4

            (+ (+ y B) C) (+ y (+ B C)) pa_ax2 biimpi
              y B pa_ax4r C addeq1i
              (+ y B) C pa_ax4r eqtr
                y (+ B C) pa_ax4r
            3eqtr4g
  finds
)

thm (pa_ax5r () ()
  (= (* (0) A) (0))

  x (0) (0) muleq2 (0) eqeq1d
    x y (0) muleq2 (0) eqeq1d
      x (S y) (0) muleq2 (0) eqeq1d
        x A (0) muleq2 (0) eqeq1d
          (0) pa_ax5
            (0) y pa_ax6
            (* (0) y) pa_ax3 eqtr (0) eqeq1i biimpri
  finds
)

thm (pa_ax6r () ()
  (= (* (S A) B) (+ (* A B) B))

  x (0) (S A) muleq2 x (0) A muleq2 (= x (0)) id addeq12d eqeq12d
    x y (S A) muleq2 x y A muleq2 (= x y) id addeq12d eqeq12d
      x (S y) (S A) muleq2 x (S y) A muleq2 (= x (S y)) id addeq12d eqeq12d
        x B (S A) muleq2 x B A muleq2 (= x B) id addeq12d eqeq12d
          (S A) pa_ax5 A pa_ax5 (0) addeq1i (0) pa_ax3 eqtr eqtr4

            (* (S A) y) (+ (* A y) y) (S A) addeq1
            (S A) y pa_ax6 syl5eq
            (+ (* A y) y) A pa_ax4 syl6eq
              (* A y) y A addass y A addcom (* A y) addeq2i eqtr
              (* A y) A y addass eqtr4
              (+ (+ (* A y) y) A) (+ (+ (* A y) A) y) pa_ax2 mpbi
            syl6eq
              A y pa_ax6 (S y) addeq1i
              (+ (* A y) A) y pa_ax4 eqtr
            syl6eqr
  finds
)

thm (mulcom () ()
  (= (* A B) (* B A))

  x (0) B muleq1 x (0) B muleq2 eqeq12d
    x y B muleq1 x y B muleq2 eqeq12d
      x (S y) B muleq1 x (S y) B muleq2 eqeq12d
        x A B muleq1 x A B muleq2 eqeq12d

          B pa_ax5r B pa_ax5 eqtr4

            (* y B) (* B y) B addeq1
            y B pa_ax6r syl5eq
            B y pa_ax6 syl6eqr
  finds
)

thm (add23 () ()
  (= (+ (+ A B) C) (+ (+ A C) B)) 
  A B C addass
  B C addcom A addeq2i eqtr
  A C B addass eqtr4
)

thm (add4 () ()
  (= (+ (+ A B) (+ C D)) (+ (+ A C) (+ B D)))
  (+ A B) C D addass 
  A B C add23 D addeq1i eqtr3
  (+ A C) B D addass eqtr
)

thm (distr () ()
  (= (* A (+ B C)) (+ (* A B) (* A C)))

  x (0) (+ B C) muleq1 x (0) B muleq1 x (0) C muleq1 addeq12d eqeq12d
    x y (+ B C) muleq1 x y B muleq1 x y C muleq1 addeq12d eqeq12d
      x (S y) (+ B C) muleq1 x (S y) B muleq1 x (S y) C muleq1 addeq12d eqeq12d
        x A (+ B C) muleq1 x A B muleq1 x A C muleq1 addeq12d eqeq12d

          (+ B C) pa_ax5r B pa_ax5r C pa_ax5r addeq12i (0) pa_ax3 eqtr eqtr4

            (* y (+ B C)) (+ (* y B) (* y C)) (+ B C) addeq1
            y (+ B C) pa_ax6r syl5eq
              y B pa_ax6r y C pa_ax6r addeq12i
              (* y B) B (* y C) C add4 eqtr
            syl6eqr
  finds
)

thm (mulass () ()
  (= (* (* A B) C) (* A (* B C)))

  x (0) B muleq1 C muleq1d x (0) (* B C) muleq1 eqeq12d
    x y B muleq1 C muleq1d x y (* B C) muleq1 eqeq12d
      x (S y) B muleq1 C muleq1d x (S y) (* B C) muleq1 eqeq12d
        x A B muleq1 C muleq1d x A (* B C) muleq1 eqeq12d

          B pa_ax5r C muleq1i C pa_ax5r eqtr (* B C) pa_ax5r eqtr4

            (* (* y B) C) (* y (* B C)) (* B C) addeq1
              y B pa_ax6r C muleq1i
              C (+ (* y B) B) mulcom C (* y B) B distr eqtr3 eqtr
              C (* y B) mulcom C B mulcom addeq12i eqtr
            syl5eq
            y (* B C) pa_ax6r syl6eqr
  finds
)

thm (addcan () ()
  (<-> (= (+ B A) (+ C A)) (= B C))
  x (0) B addeq2 x (0) C addeq2 eqeq12d (= B C) bibi1d
    x y B addeq2 x y C addeq2 eqeq12d (= B C) bibi1d
      x (S y) B addeq2 x (S y) C addeq2 eqeq12d (= B C) bibi1d
        x A B addeq2 x A C addeq2 eqeq12d (= B C) bibi1d

          B pa_ax3 C pa_ax3 eqeq12i

            B y pa_ax4 C y pa_ax4 eqeq12i
            (+ B y) (+ C y) pa_ax2 bitr4i (= B C) bibi1i biimpri
  finds
)

thm (addcan2 () ()
  (<-> (= (+ A B) (+ A C)) (= B C))
  A B addcom A C addcom eqeq12i
    B A C addcan bitri
)

thm (leeq1d ()
  (hyp (-> ph (= A B)))
  (-> ph (<-> (<= A C) (<= B C)))
  hyp
    A B x addeq1 C eqeq1d x exbid
      A C x df-le B C x df-le bibi12i
    sylibr
  syl
)

thm (leeq1i ()
  (hyp (= A B))
  (<-> (<= A C) (<= B C))
  hyp (= A B) id C leeq1d ax-mp
)

thm (leeq2d ()
  (hyp (-> ph (= A B)))
  (-> ph (<-> (<= C A) (<= C B)))
  hyp
    A B (+ C x) eqeq2 x exbid 
      C A x df-le C B x df-le bibi12i
    sylibr
  syl
)

thm (leeq2i ()
  (hyp (= A B))
  (<-> (<= C A) (<= C B))
  hyp (= A B) id C leeq2d ax-mp
)

thm (letr () ()
  (-> (/\ (<= A B) (<= B C)) (<= A C))

  z (+ x y) A addeq2
  A x y addass syl6eqr (= (+ A x) B) adantr
  (+ A x) B y addeq1 (= z (+ x y)) adantl eqtrd
  C eqeq1d biimprd
  imp ancoms x substex ex y 19.23ai com12 imp
    A B x df-le
    B C y df-le anbi12i
    A C z df-le imbi12i
  mpbir
)

thm (addge01t () ()
  (<= A (+ A B))
  x B tyex x B A addeq2 x 19.22i ax-mp
  A (+ A B) x df-le mpbir
)

thm (leid () ()
  (<= A A)
  A (0) addge01t
  A pa_ax3 A leeq2i mpbi
)

thm (leadd1 () ()
  (<-> (<= A B) (<= (+ A C) (+ B C)))
  (+ A x) C B addcan
  A x C add23 (+ B C) eqeq1i bitr3i
  x exbii
    A B x df-le
      (+ A C) (+ B C) x df-le
  3bitr4i
)

thm (a1suc () ()
  (= (S A) (+ A (1)))
  df-1 A addeq2i
  A (0) pa_ax4 eqtr
  A pa_ax3 (+ A (0)) A pa_ax2 mpbi eqtr eqcomi
)

thm (0ne1 () ()
  (-. (= (0) (1)))
  (0) pa_ax1
  df-1 (0) eqeq2i mtbir
)

thm (1nle0 () ()
  (-. (<= (1) (0)))
  x pa_ax1 (0) (S x) eqcom mtbi
  x a1suc x (1) addcom eqtr (0) eqeq1i mtbi
  x gen x (= (+ (1) x) (0)) alnex mpbi
  (1) (0) x df-le mtbir
)

thm (lefoo ((A z)) ()
  (\/ (= A (0)) (E. z (= (+ (1) z) A)))
  x (0) (0) eqeq1 x (0) (+ (1) z) eqeq2 z exbid orbi12d
    x y (0) eqeq1 x y (+ (1) z) eqeq2 z exbid orbi12d
      x (S y) (0) eqeq1 x (S y) (+ (1) z) eqeq2 z exbid orbi12d
        x A (0) eqeq1 x A (+ (1) z) eqeq2 z exbid orbi12d

  # invariant: x = 0 \/ E. z 1 + z = x
  (0) eqid (E. z (= (+ (1) z) (0))) orci

  z y tyex
    z y (1) addeq2
    y a1suc y (1) addcom eqtr syl6eqr
    z 19.22i
  ax-mp (= (S y) (0)) olci
  (\/ (= y (0)) (E. z (= (+ (1) z) y))) a1i
  finds
)

thm (lefoo3 () ()
  (<-> (<= A B) (\/ (= A B) (<= (+ A (1)) B)))
  A B x df-le
    x y lefoo
      x (0) A addeq2
      A pa_ax3 syl6eq B eqeq1d biimpd com12
        (+ (1) y) x A addeq2 A (1) y addass syl5eq
        B eqeq1d biimprd com12
        y 19.22d
        (+ A (1)) B y df-le syl6ibr
      orim12d
    mpi
  x 19.23ai sylbi
    A leid (= A B) id A leeq2d mpbii
      A (1) addge01t A (+ A (1)) B letr mpan
    jaoi
  impbii
)

thm (lenlttlem () ()
  (-. (<= (+ A (1)) A))
  1nle0 (1) (0) A leadd1 mtbi
  (1) A addcom (+ (0) A) leeq1i mtbi
  A pa_ax3r (+ A (1)) leeq2i mtbi
)

thm (nnltp1let () ()
  (<-> (< A B) (<= (+ A (1)) B))
  A B df-lt
  A B lefoo3 (-. (= A B)) anbi1i bitri
    A lenlttlem
    (= A B) id (+ A (1)) leeq2d mtbii
    con2i pm4.71i

      (<= (+ A (1)) B) (= A B) pm5.61
      (<= (+ A (1)) B) (= A B) orcom (-. (= A B)) anbi1i bitr3i
    bitri
  bitr4i
)

thm (addge02t () ()
  (<= A (+ B A))
  A B addge01t A B addcom A leeq2i mpbi
)

thm (nn0nlt0 () ()
  (-. (< A (0)))
    1nle0 (1) A addge02t
    (1) (+ A (1)) (0) letr mpan
  mto
  A (0) nnltp1let mtbir
)

thm (lteq2d ()
  (hyp (-> ph (= A B)))
  (-> ph (<-> (< C A) (< C B)))
  hyp C leeq2d
  hyp C eqeq2d notbid anbi12d
    C A df-lt
      C B df-lt
  3bitr4g
)

thm (lteq2i ()
  (hyp (= A B))
  (<-> (< C A) (< C B))
  hyp (= A B) id C lteq2d ax-mp
)

thm (lenltt () ()
  (<-> (<= A B) (-. (< B A)))
  (= x (0)) id B leeq1d (= x (0)) id B lteq2d notbid bibi12d
    (= x y) id B leeq1d (= x y) id B lteq2d notbid bibi12d
      (= x (S y)) id B leeq1d (= x (S y)) id B lteq2d notbid bibi12d
        (= x A) id B leeq1d (= x A) id B lteq2d notbid bibi12d

  # base case
  (0) B addge02t
    B pa_ax3 (0) leeq2i
  mpbi
  B nn0nlt0 2th

  # induction step
  (<= y B) (-. (< B y)) (-. (= y B)) anbi1
    y B nnltp1let y B df-lt bitr3i
      B (+ y (1)) nnltp1let
      B y (1) leadd1 bitr4i
      B y lefoo3 bitri
      B y nnltp1let (= B y) orbi2i bitr4i
        B y eqcom (< B y) orbi1i
        (= y B) (< B y) orcom bitri
      bitri notbii
      (< B y) (= y B) ioran bitri
    bibi12i
  sylibr
    y a1suc B leeq1i y a1suc B lteq2i notbii bibi12i
  sylibr
  finds
)

thm (axlttri () ()
  (<-> (< A B) (-. (\/ (= A B) (< B A))))
  A B df-lt
  A B lenltt (-. (= A B)) anbi1i bitri
    (< B A) (= A B) ioran
      (< B A) (= A B) orcom notbii
    bitr3i
  bitri
)

thm (ltadd1 () ()
  (<-> (< A B) (< (+ A C) (+ B C)))
  A B C leadd1
    A C B addcan bicomi notbii
  anbi12i

    A B df-lt
      (+ A C) (+ B C) df-lt
  3bitr4i
)

thm (lemul2 () ()
  (-> (<= A B) (<= (* C A) (* C B)))

  A B x df-le
    (0) eqid
      y (* C x) (* C A) addeq2
        (+ A x) B C muleq2
        C A x distr syl5eqr
      sylan9eq
      (= (0) (0)) adantl x substex
    mpan
  sylbi
    (* C A) (* C B) y df-le
  sylibr
)

# substitution thms

thm (df-subst-just ((A z y) (ph z y)) ()
      (<-> (E. y (/\ (= y A) (E. x (/\ (= x y) ph))))
          (E. z (/\ (= z A) (E. x (/\ (= x z) ph)))))
     y z A eqeq1
       y z x eqeq2 ph anbi1d x exbid
     anbi12d exalpha
     )

defthm (df-subst wff ([/] A x ph) ((A z) (ph z)) ()
         (<-> ([/] A x ph) (E. z (/\ (= z A) (E. x (/\ (= x z) ph)))))
         y A x ph z df-subst-just)

defthm (df-rwff wff (rwff x ph) () ()
        (<-> (rwff x ph) (A. x (<-> ph ([/] x x ph))))
      (A. x (<-> ph ([/] x x ph))) biid)

thm (dfsbcq () ()
  (-> (= A B) (<-> ([/] A x ph) ([/] B x ph)))
  A B y eqeq2 (E. x (/\ (= x y) ph)) anbi1d y exbid
  A x ph y df-subst B x ph y df-subst bibi12i sylibr
)

thm (a4sbc () ()
  (-> (A. x ph) ([/] A x ph))

  x y tyex x ph (= x y) 19.29 mpan2
  ph (= x y) ancom x exbii sylib
  y 19.21ai
    y A tyex (A. x ph) a1i
  jca
  y (E. x (/\ (= x y) ph)) (= y A) 19.29 syl
  (E. x (/\ (= x y) ph)) (= y A) ancom y exbii sylib
  A x ph y df-subst sylibr
)

thm (ceqsex ((ps x) (A x))
  (hyp (-> (= x A) (<-> ph ps)))
  (<-> (E. x (/\ (= x A) ph)) ps)

  hyp pm5.32i x exbii
  x (= x A) ps 19.41 bitri
  x A tyex mpbiran
)

thm (sbc5 ((A x)) ()
  (<-> ([/] A x ph) (E. x (/\ (= x A) ph)))

  A x ph y df-subst
    y A x eqeq2 ph anbi1d
    x exbid
    ceqsex
  bitri
)

thm (sbcco ((ph y) (A y)) ()
  (<-> ([/] A y ([/] y x ph)) ([/] A x ph))

  A y ([/] y x ph) sbc5
    y x ph sbc5
      (= y A) anbi2i y exbii
    bitri
  A x ph y df-subst bitr4i
)

thm (sbcie ((A x) (ps x))
  (hyp (-> (= x A) (<-> ph ps)))
  (<-> ([/] A x ph) ps)

  A x ph sbc5
  hyp ceqsex bitri
)

thm (cla4g ((ps x) (A x))
  (hyp (-> (= x A) (<-> ph ps)))
  (-> (A. x ph) ps)
  x ph A a4sbc hyp sbcie sylib
)

thm (sbcbid ((ph x))
  (hyp (-> ph (<-> ps ch)))
  (-> ph (<-> ([/] A x ps) ([/] A x ch)))

  hyp (= x y) anbi2d x exbid
  (= y A) anbi2d y exbid
    A x ps y df-subst
      A x ch y df-subst
  3bitr4g
)

thm (sbcbii ()
  (hyp (<-> ph ps))
  (<-> ([/] A x ph) ([/] A x ps))
  (0) eqid
    hyp (= (0) (0)) a1i A x sbcbid
  ax-mp
)

thm (rwffi ((ps x) (ph y))
  (hyp (-> (= x y) (<-> ph ps)))
  (rwff x ph)
  hyp sbcie x y sbcbii
  hyp x y eqcom ph ps bicom imbi12i mpbi sbcie bitri

  x y x ph sbcco
  bitr3i x gen
  x ph df-rwff mpbir
)

defthm (df-eu wff (E! x ph) ((ph y)) ()
          (<-> (E! x ph) (E. y (A. x (<-> ph (= x y)))))
       z y x eqeq2 ph bibi2d x 19.21ai 19.15d exalpha)

export (PEANO peano_ax.ghi (PROP PEANO_MIN) "")

# Some naive set theory

import (NAIVE_SET naive_set.ghi (PROP PEANO_MIN PEANO) "")

tvar (set S T U V)


thm (eqri ((S x) (T x))
  (hyp (<-> (e. x S) (e. x T)))
  (=_ S T)
  hyp x gen S T x df-seq mpbir
)

thm (eleq2 () ()
  (-> (=_ S T) (<-> (e. A S) (e. A T)))
  S T x df-seq
    x A S ax-eleq1 x A T ax-eleq1 bibi12d
  cla4g sylbi
)

thm (eleq2i ()
  (hyp (=_ S T))
  (<-> (e. A S) (e. A T))
  hyp S T A eleq2 ax-mp
)

thm (abid ()
  (hyp (rwff x ph))
  (<-> (e. x ({|} x ph)) ph)
  x x ph ax-elab
    hyp x ph df-rwff mpbi a4i
  bitr4i
)

thm (elab ((A x) (ps x))
  (hyp (-> (= x A) (<-> ph ps)))
  (<-> (e. A ({|} x ph)) ps)
  A x ph ax-elab
  hyp sbcie bitri
)

thm (elab2 ((A x) (ps x))
  (hyp1 (-> (= x A) (<-> ph ps))
   hyp2 (=_ S ({|} x ph)))
  (<-> (e. A S) ps)
  hyp2 A eleq2i hyp1 elab bitri
)

thm (elin () ()
  (<-> (e. A (i^i S T)) (/\ (e. A S) (e. A T)))

  x A S ax-eleq1 x A T ax-eleq1 anbi12d
    S T x df-in
  elab2
)

# Problem: this theorem verified, but is not true, without
# constraints (S x) (T x). Consider S = {x + 1}, T = {x + 2}.
# The problem was that df-seq lacked these constraints, but needs them.
# Fixed.
thm (dfss2 ((S x) (T x)) ()
  (<-> (C_ S T) (A. x (-> (e. x S) (e. x T))))

  S T df-ss
    (e. x S) (e. x T) pm4.71 (e. x S) (/\ (e. x S) (e. x T)) bicom bitri

      x S T elin
      (e. x S) bibi1i
    bitr4i x albii
    (i^i S T) S x df-seq bitr4i

  bitr4i
)

thm (noel () ()
  (-. (e. A ({/})))

  A eqid
    (= x A) id (= x A) id eqeq12d notbid
      x df-emptyset
    elab2
  con2bii mpbi
)

thm (elsnc () ()
  (<-> (e. A ({} B)) (= A B))
  x A B eqeq1
    B x df-sn
  elab2
)

thm (snid () ()
  (e. A ({} A))
  A eqid
    A A elsnc
  mpbir
)

# Proofs in progress:

# thm stmt (opth () ()
#    (<-> (= (<,> A B) (<,> C D)) (/\ (= A C) (= B D)))
# ?)


# thm (iotacl () ()
#   (-> (E! x (e. x S)) (e. (iota S) S))
# ?)

# Would it be cleaner to write (-> (-. (=_ S ({/})))) for the antecedent?
# thm (mincl ((S x)) ()
#   (-> (E. x (e. x S)) (e. (min S) S))
# ?)

# thm (modlt () ()
#   (-> (< 0 B) (< (mod A B) B))
# ?)

# thm (modid () ()
#   (-> (< A B) (= (mod A B) A))
# ?)

# thm (modcyc () ()
#   (-> (< 0 B) (= (mod (+ A (* B C)) B) (mod A B)))
# ?)

# thm (modadd () ()
#   (-> (/\ (< 0 D) (= (mod A D) (mod B D)))
#    (= (mod (+ A C) D) (mod (+ B C) D)))
# ?)

# thm (divcan4 () ()
#   (-> (< 0 B) (= (div (* A B) B) A))
# ?)



# number 1.0
thm (opth1 () ()
   (-> (/\ (= A C) (= B D)) (= (<,> A B) (<,> C D)))
  A C B D addeq12 (+ A B) muleq1d
  A C B D addeq12 (+ A B) (+ C D) (+ C D) muleq2 syl eqtrd
  (= A C) (= B D) pm3.27
  addeq12d
  A B df-op C D df-op 3eqtr4g
)
# number 2.0
thm (19.8ai () (hyp ph) (E. x ph) hyp ph x 19.8a ax-mp )

# number 2.5
thm (nalexi () (hyp (-. (A. x (-. ph)))) (E. x ph)
  hyp x ph df-ex bicomi mpbi)  
# number 3.0
thm (test () () (E. x (= x (0)))
  x (0) ax-tyex nalexi) 
# number 4.0
thm (impexpi  () (hyp (-> (/\ ph ps) ch)) (-> ps (-> ph ch))
  hyp ancoms ps ph ch impexp mpbi)
# number 5.0
thm (distl () ()
  (= (* (+ A B) C) (+ (* A C) (* B C)))

   (+ A B) C mulcom C A B distr eqtr
   C A mulcom C B mulcom addeq12i eqtr)
# number 6.0
thm (distrl () ()
  (= (* (+ A B) (+ C D)) (+ (+ (* A C) (* B C)) (+ (* A D) (* B D))))
  (+ A B) C D distr
    A B C distl A B D distl addeq12i eqtr)
# number 7.0
thm (lemul3lem1 () (hyp (-> ph (= (+ A B) C))) (-> ph (<= A C))
  A B addge01t 
   hyp
   A leeq2d
  mpbii
)
# number 8.0
thm (lemul3lem2 () (hyp (-> ph (<= (+ A B) C))) (-> ph (<= A C))
  A B addge01t ph a1i
   hyp
  jca
    A (+ A B) C letr
  syl)
# number 9.0
thm (exani ((ps x)) (hyp (-> ph ps)) (-> (E. x ph) ps)
  hyp
  x 19.22i
  x ps 19.9 sylib)
# number 10.0

thm (lemul3 () ()
  (-> (/\(<= A B) (<= C D)) (<= (* A C) (* B D)))
  A B x df-le C D y df-le anbi12i
  x (= (+ A x) B) (E. y (= (+ C y) D)) 19.41 bitr4i
    y (= (+ A x) B) (= (+ C y) D) 19.29
    y (= (+ A x) B) 19.3
    sylanbr
  x 19.22i  sylbi

  (+ A x) B (+ C y) D muleq12
    A x C y distrl 
  syl5eqr
 lemul3lem1 lemul3lem2
 y exani x exani syl)
# number 11.0
thm (lttr () ()
  (-> (/\ (< A B) (< B C)) (< A C))
  A B nnltp1let B C nnltp1let anbi12i biimpi
  B (1) addge01t
  (+ A (1)) B (+ B (1)) letr mpan2 (<= (+ B (1)) C) anim1i syl
  (+ A (1)) (+ B (1)) C letr syl
  A C nnltp1let sylibr)

# number 12.0
thm (addassrli () (h (= A (+ B (+ C D))))
   (= A (+ (+ B C) D))
   h
   B C D addass eqtr4)
# number 13.0
thm (mulid () ()
  (= (* A (1)) A)
    df-1  (1) (S (0)) A muleq2 ax-mp 
    A (0) pa_ax6 
      A pa_ax5 A addeq1i  eqtr   A (0) addcom eqtr4 A pa_ax3  
    eqtr
  eqtr)
# number 14.0
thm (ltmul () () (
  -> (/\(< A B) (< C D)) (< (* A C) (* B D)))
  A B nnltp1let C D nnltp1let anbi12i
  (+ A (1)) B (+ C (1)) D lemul3 sylbi
  
  (* A C) (+ (* (1) C) (* A (1))) addge01t 
    (* A C) (* (1) C) (* A (1)) addass (* A C) leeq2i  mpbir
     (* A C) (+ (+ (* A C) (* (1) C)) (* A (1))) (1) leadd1 mpbi
    A (1) C (1) distrl addassrli 
      (1) mulid (+ (+ (* A C) (* (1) C)) (* A (1))) addeq2i eqtr
      (+ (* A C) (1)) leeq2i
  mpbir
  jctil
  (+ (* A C) (1)) (* (+ A (1)) (+ C (1))) (* B D) letr syl
  (* A C) (* B D) nnltp1let sylibr)
# number 15.0
thm (sqle () ()
  (<-> (<= A B) (<= (* A A) (* B B)))
  A B A B lemul3 anidms
  (* A A) (* B B) lenltt
    B A B A ltmul anidms con3i sylbi A B lenltt sylibr
  impbii)  
 
# number 16.0
thm (lteq1d () (hyp (-> ph (= A B)))
  (-> ph (<-> (< A C) (< B C)))
  hyp C leeq2d
  C A lenltt
  C B lenltt
 bibi12i
 sylib
 con4bid
)
# number 17.0
thm (muleq12d () 
  (hyp1 (-> ph (= A B)) 
   hyp2 (-> ph (= C D)))
  (-> ph (= (* A C) (* B D)))
  hyp1  hyp2 
  jca
  A B C D muleq12
  syl
)
# number 18.0
thm (sqrtlem5 () ()
  (E. x (/\ (<= (* x x) (0)) (< (0) (* (S x) (S x)))))
   x (0) tyex 
      (0) leid  (0) pa_ax5 (0) leeq1i  mpbir
   (= x (0)) id (= x (0)) id muleq12d  (0) leeq1d  mpbiri
     1nle0 (1) (0) lenltt mtbi notnotri
        (1) mulid  df-1 df-1  pm3.2i
        (1) (S (0)) (1) (S (0)) muleq12
      ax-mp eqtr3  (0) lteq2i
     mpbi
     (= x (0)) id  suceqd
     (= (S x) (S (0))) id (= (S x) (S (0))) id muleq12d syl (0) lteq2d mpbiri
  jca
  x 19.22i ax-mp
)
# number 19.0
thm (sqrtlem1 ((A x)) ()
  (-> (= y A) 
     (<-> (E. x (/\ (<= (* x x) y) (< y (* (S x) (S x)))))
          (E. x (/\ (<= (* x x) A) (< A (* (S x) (S x)))))))
  (= y A) id (* x x) leeq2d
  (= y A) id (* (S x) (S x)) lteq1d
  anbi12d x exbid
)
# number 20.0
thm (lelttr () ()
  (-> (/\ (<= A B) (< B C)) (< A C))
  A B (1) leadd1
  B C nnltp1let
  anbi12i
  (+ A (1)) (+ B (1)) C letr sylbi
  A C nnltp1let
  sylibr
)

# number 21.0
thm (lteq1i () (h (= A B))
  (<-> (< A C) (< B C))
  h (= A B) id C lteq1d ax-mp)
# number 22.0
thm (ancomd () (h (-> ph (/\ ps ch)))
  (-> ph (/\ ch ps))
  h
  ps ch ancom 

 sylib
)
# number 23.0
thm (19.9d ((ps x)) (h (-> ph (E. x ps)))
  (-> ph ps)
  h
  x ps 19.9
  sylib
)
# number 24.0
thm (sqrtlem6 () ()
  (-> (E. x (/\ (<= (* x x) y) (< y (* (S x) (S x)))))
      (E. x (/\ (<= (* x x) (S y)) (< (S y) (* (S x) (S x))))))

  # y < x' * x' <-> case A \/ case B
  y (* (S x) (S x)) nnltp1let    (+ y (1)) (* (S x) (S x)) lefoo3     bitri

  # spruce this up by adding (... and PH) to both sides
  biimpi (<= (* x x) y) anim1i ancoms ancomd 
  
  # For MUCH later, to factor out the common AND
  (<= (* x x) y) 
    (= (+ y (1)) (* (S x) (S x))) 
      (<= (+ (+ y (1)) (1)) (* (S x) (S x)))
  andi

  # We don't need this AND term, but Case B does, so add it in here
  (<= (* x x) y) (= (+ y (1)) (* (S x) (S x))) pm3.27 

  # Tuck this away for "later"...
  z (S x) tyex

  # Case A -> x' * x' = y'
  y a1suc eqcomi    (+ y (1)) (* (S x) (S x)) (S y)  eqeq1     mpbii 

  # Case A -> x' * x' <= y'
  (* (S x) (S x)) leid 
  (= (* (S x) (S x)) (S y)) id (* (S x) (S x)) leeq2d mpbii
  # Introduce z as x'
  (= z (S x)) id   (= z (S x)) id   muleq12d   (S y) leeq1d     biimprcd  syl
  

  # x' < x''
  (+ (S x) (1)) leid   (S x) a1suc  (+ (S x) (1)) leeq2i  mpbir   (S x) (S (S x)) nnltp1let    mpbir
  # x' * x' < x'' * x''
  (< (S x) (S (S x))) pm4.24  mpbi (S x) (S (S x)) (S x) (S (S x)) ltmul  ax-mp
  # Case A -> y' < x'' * x''
  (= (* (S x) (S x)) (S y)) id (* (S (S x)) (S (S x))) lteq1d mpbii
  (= z (S x)) id suceqd  (= z (S x)) id suceqd   muleq12d (S y) lteq2d  
      biimprcd syl

  # Join it all up for case A
  jcad syl  z 19.21ai 
  z (= z (S x)) (/\ (<= (* z z) (S y)) (< (S y) (* (S z) (S z))))  19.22 syl
  # ... and it's finally "later".
  mpi
  # Bring in the extra AND clause
  syl

  # Okay, time to consider Case B
  # Tuck this away for "later"...
  z x tyex

  # y <= y'
  y (1) addge02t y a1suc y (1) addcom eqtr y leeq2i mpbir
  # x*x <=y -> x*x <= y'
  (* x x) y (S y) letr mpan2

  # y + 1 + 1 < x' * x' -> y + 1 < x' * x'
  (+ y (1)) (* (S x) (S x)) nnltp1let  biimpri 
  # ... -> y' < x' * x'
  y a1suc  (* (S x) (S x))  lteq1i  sylibr

  # Join up case B
  anim12i 
  # Now to add the z
  # z=x -> z*z<=y' <-> x*x<=y'
  z x z x muleq12 anidms (S y) leeq1d
  # z=x -> y'<z'*z'<-> y'<x'*x'
  z x pa_ax2 biimpi   z x pa_ax2 biimpi muleq12d (S y) lteq2d
  # put it all together
  anbi12d biimprcd syl
  z 19.21ai
  z (= z x) (/\ (<= (* z z) (S y)) (< (S y) (* (S z) (S z))))  19.22  syl
  # And it's finally "later" again.
  mpi


  # Unify the cases
  jaoi
  # Now it is MUCH later, time to factor
  sylbi
  # Both cases are handled!
  syl

  # Existential plumbing
  x  19.22i 19.9d
  # alpha switch
  z x z x muleq12 anidms (S y) leeq1d
  z x pa_ax2 biimpi   z x pa_ax2 biimpi muleq12d (S y) lteq2d
  anbi12d exalpha sylib
)
  
# number 25.0
thm (sqrt ((A x)) ()
   (E. x (/\ (<= (* x x) A) (< A (* (S x) (S x)))))
  z (0) x sqrtlem1
  z y x sqrtlem1
  z (S y) x sqrtlem1
  z A x sqrtlem1
  x sqrtlem5
  x y sqrtlem6
  finds
)
# number 26.0
thm (sqlt () () (<-> (< A B) (< (* A A) (* B B)))
  B A sqle
  notbii
  (* B B) (* A A) lenltt
  notbii bitri 
  (< (* A A) (* B B)) notnot bicomi bitri

  B A lenltt notbii
  bitr3i
  (< A B) notnot bicomi bitri bicomi
)
# number 27.0
thm (lesym () () 
  (<-> (= A B) (/\ (<= A B) (<= B A)))
  # A=B -> A<=B
  B leid    (= A B) id B leeq1d    mpbiri
  # A=B -> B<=A
  A leid    (= A B) id A leeq1d    mpbii
  jca
  
  A B lenltt
  B A df-lt
  notbii   bitri
  (<= B A) (-. (= B A)) ianor
  bitri biimpi

  (<= B A) (-. (-. (= B A))) imor bicomi biimpi syl  imp
  (= B A) notnot2 syl
  eqcomd

 impbii
)

# number 28.0
thm (lesuc () () 
  (<-> (< A (S B)) (<= A B))
   A (S B) nnltp1let
   B a1suc   (+ A (1)) leeq2i bitri
   A B (1) leadd1 bicomi bitri
)
# number 29.0

thm (sqrtuniq () ()
   (-> (/\ (/\ (<= (* A A) B) (< B (* (S A) (S A))))
           (/\ (<= (* C C) B) (< B (* (S C) (S C)))))
   (= A C))
   
   # Diddle with and ordering
   (<= (* C C) B)  (< B (* (S C) (S C)))  ancom
      (/\ (<= (* A A) B)    (< B (* (S A) (S A)))) anbi2i
   (<= (* A A) B) (< B (* (S A) (S A)))
      (< B (* (S C) (S C)))    (<= (* C C) B)    an4    
   bitri

   (* A A) B (* (S C) (S C)) lelttr
   (* C C) B (* (S A) (S A)) lelttr ancoms anim12i
   sylbi

   # ... -> A < C' /\ C < A'
   A (S C) sqlt  C (S A) sqlt anbi12i  biimpri syl

   A C lesuc   C A lesuc
   anbi12i
   A C lesym bicomi bitri biimpi syl
)

# number 30.0
thm (opthlem1 () ()
   (/\ (<= (* (+ A B) (+ A B)) (+ (* (+ A B) (+ A B)) B))
       (< (+ (* (+ A B) (+ A B)) B) (* (S (+ A B)) (S (+ A B)))))
 # First part is easy 
 (* (+ A B) (+ A B)) B  addge01t

   # A + B <= A + B
   (+ A B) leid  
   # A + B <= (A + B)'
   (+ A B)  (1) addge01t  (+ A B) a1suc (+ A B) leeq2i mpbir
 # Now multiply them out
 (+ A B) (+ A B) (+ A B) (S (+ A B)) lemul3 mp2an

 # Throw in a free A on the right side
 (* (+ A B) (S (+ A B))) A addge01t
 (* (+ A B) (+ A B)) (* (+ A B) (S (+ A B))) (+  (* (+ A B) (S (+ A B))) A) letr mp2an
 # And add B to each side
 (* (+ A B) (+ A B)) (+ (* (+ A B) (S (+ A B))) A)  B leadd1 mpbi
 # Convert le to lt using suc
(+ (* (+ A B) (+ A B)) B) (+ (+ (* (+ A B) (S (+ A B))) A)  B) lesuc mpbir


 # Expand left side of (A+B)'**2 and distribute.
 (+ A B) a1suc (S (+ A B)) muleq1i
 (+ A B) (1) (S (+ A B)) distl eqtr
 # Remove 1* 
 (S (+ A B)) (1) mulcom   (S (+ A B)) mulid eqtr3     (* (+ A B) (S (+ A B))) addeq2i eqtr
 # Expand (A+B)'
 (+ A B) a1suc (* (+ A B) (S (+ A B))) addeq2i eqtr
 # Pull the 1 out to the right and reassoc
 addassrli
 (* (+ A B) (S (+ A B))) A B addass (1) addeq1i eqtr4
 # Convert the +1 to a suc

 (+ (+ (* (+ A B) (S (+ A B))) A) B)  a1suc eqtr4
 (+ (* (+ A B) (+ A B)) B)  lteq2i mpbir

 pm3.2i
)
# number 31.0
thm (opthlem2 () ()
    (-> (= (<,> A B) (<,> C D)) (= (+ C D) (+ A B)))

    A B opthlem1

    A B df-op (<,> C D) eqeq1i biimpi  C D df-op  syl6eq
    (* (+ A B) (+ A B)) leeq2d
    A B df-op (<,> C D) eqeq1i biimpi  C D df-op  syl6eq
    (* (S (+ A B)) (S (+ A B))) lteq1d
    anbi12d
  mpbii

  C D opthlem1
  (+ C D) (+ (* (+ C D) (+ C D)) D) (+ A B) sqrtuniq
  mpan

  syl
)
# number 32.0
thm (opthlem3 () ()
    (-> (= (<,> A B) (<,> C D)) (= B D))
  A B C D opthlem2

  # Duplicate the conclusion
  (= (<,> A B) (<,> C D)) (= (+ C D) (+ A B)) anidmdbi mpbir
  # Square the conclusion
  (+ C D) (+ A B) (+ C D) (+ A B) muleq12 syl

  eqcomd B addeq1d eqcomd

  A B df-op (<,> C D) eqeq1i biimpi  C D df-op  syl6eq

  eqtrd
  (* (+ C D) (+ C D)) B D addcan2
  sylib
)
# number 33.0
thm (opth () ()
    (<-> (= (<,> A B) (<,> C D)) (/\ (= A C) (= B D)))
  A B C D opthlem2

    A B C D opthlem3
    A B D addcan2
  sylibr
  
  eqtrd
  C D A addcan
  sylib
  eqcomd
  A B C D opthlem3 
  jca
  A C B D opth1
  


 impbii
)
# number 33.5
thm (ex-nf ((ph x)) () (-> (E. x ph) ph)
  x ph df-ex biimpi 
    (-. ph) x alnfi con1i
  syl
)
# number 34.0
thm (iotacl ((S x)) ()
   (-> (E! x (e. x S)) (e. (iota S) S))
  x (e. x S) y df-eu biimpi


    x y elsnc (e. x S)  bibi2i x gen 19.15i biimpri
    S ({} y) x  df-seq biimpri
  syl
  y 19.22i syl

  S ({} y) ax-iotaeq y ax-iota  syl6eq 
  (iota S) y elsnc  sylibr
  S ({} y) (iota S) eleq2

  biimprd mpd y 19.22i
  syl
    y (e. (iota S) S) ex-nf
  syl
)
 
# number 35.0
thm (alpha1 ((ph y) (ps x)) (1 (-> (= x y) (-> ph ps)))  
     (-> (A. x ph) (A. y ps))
 (A. x ph) y alnfi

    x ph y a4sbc
    y x ph z df-subst 
  sylib

  x (/\ (= x z) ph) (= z y) 19.41
  biimpri   ancoms   (/\ (= x z) ph) (= z y) ancom x exbii     sylib  z 19.22i
 syl

    (= z y) (= x z) ph anass
      z y x ax-eqtr    z x eqcom  sylan2br  eqcomd
    ph anim1i
  sylbir
  x 19.22i z 19.22i syl

  z (E. x (/\ (= x y) ph)) 19.9    sylib
  1 imp x  19.22i   syl  x ps 19.9   sylib
  
  y 19.20i   syl
)
# number 36.0
thm (alpha ((ph y) (ps x)) (1 (-> (= x y) (<-> ph ps))) 
  (<-> (A. x ph) (A. y ps))
    1  biimpd alpha1
    1  eqcoms biimprd alpha1  
  impbii
)
# number 36.5
thm (df-divides-just ((A x) (B x) (A y) (B y)) ()
       (<-> (E. x (= (* A x) B)) (E. y (= (* A y) B)))
      x y A muleq2 B eqeq1d exalpha)

defthm (df-divides wff (| A B) ((A x) (B x)) ()
       (<-> (| A B) (E. x (= (* A x) B)))
        y A B x df-divides-just)

# number 37.0
thm (divideseq1imp () ()
  (-> (= A B) (-> (| A C) (| B C)))

  (= A B) z alnfi

    A B z muleq1    (= (* A z) C) anim1i
    (* A z) C (* B z) ax-eqtr   eqcomd   ancoms 
  syl    ex


    z gen  z (= A B) (-> (= (* A z) C) (= (* B z) C)) ax-alim   ax-mp
  syl
    z (= (* A z) C) (= (* B z) C) 19.22
  syl


  A C z df-divides
  syl5ib


  B C z df-divides
  (| A C) imbi2i
  sylibr
)
# number 38.1
thm (divideseq1 () ()
  (-> (= A B) (<-> (| A C) (| B C)))

  A B C divideseq1imp
  B A C divideseq1imp eqcoms 
    impbid
)
# number 39.0
thm (df-prime-just ((A x) (A y)) ()
    (<-> (A. x (-> (| x A) (\/ (= x (1)) (= x A))))
         (A. y (-> (| y A) (\/ (= y (1)) (= y A)))))
    x y A divideseq1
    x y (1) eqeq1
    x y A eqeq1  orbi12d
  imbi12d
  alpha
)
defthm (df-prime wff (prime A) ((A x))  ()
  (<-> (prime A) (A. x (-> (| x A) (\/ (= x (1)) (= x A)))))
y A x df-prime-just)

tvar (wff et zi si)
# number 40.0
thm (0orpos () () (\/ (= A (0)) (<= (1) A))
  # x = 0 \/ 1<= x
    A z lefoo
    (1) A z df-le    (= A (0)) orbi2i
  mpbir
)
# number 41.0
thm (leadd2 () ()
  (<-> (<= A B) (<= (+ C A) (+ C B)))
  A B C leadd1
  A C addcom (+ B C) leeq1i bitri
  B C addcom (+ C A) leeq2i bitri
)
# number 42.0
thm (0ne2 () () (-. (= (0) (+ (1) (1))))
    (1) pa_ax1  (1) a1suc (0) eqeq2i  mtbi #  (= (* x y) (+ (1) (1)))  mt2bi bicomi 
)
# number 43.0
#jctil with hyps listed backwards
thm (jctilb () (h1 ch h2 (-> ph ps)) (-> ph (/\ ch ps))
  h2 h1 jctil
)
# number 44.0
thm (2primelem1 () 
  (h1 (\/ ph ps) 
   h2 (\/ ch (\/ th (\/ ta et)))
   h3 (-> (/\ ps et) (-. si))
   h4 (-> ph (-. si))
   h5 (-> ch (-. si)))
   (-> si (\/ th ta))

  h4 con2i
  h1 ph ps df-or mpbi syl
  h3  con2i  ps et ianor sylib    ps et pm4.62 sylibr   mpd
  h5 con2i
  h2  ch (\/ th (\/ ta et)) df-or mpbi syl  
  th ta et 3orass sylibr 
  th ta et df-3or sylib   (\/ th ta) et df-or sylib con1d   mpd
)
# number 45.0
thm (2prime () () (prime (+ (1) (1)))
  x (+ (1) (1)) y df-divides

  # y is 0 or >=1.
  y 0orpos
  # x is 0, 1 2, or >= 3
    x 0orpos
    (1) x lefoo3    (= x (0)) orbi2i
  mpbi
  (+ (1) (1)) x lefoo3   (= (1) x) orbi2i (= x (0)) orbi2i   mpbi


  # 1<=y and 3<=x means x * y >= 1*3
  (1) y (+ (+ (1) (1)) (1)) x lemul3
  # replace 1*3  with 3
  (+ (+ (1) (1)) (1)) mulid (+ (+ (1) (1)) (1)) (1) mulcom eqtr3 (* y x) leeq1i bicomi sylib
  # but it's not true that 3 <= 2
  1nle0    (1) (0) (+ (1) (1)) leadd2    (+ (1) (1)) pa_ax3 (+ (+ (1) (1)) (1)) leeq2i bitri   notbii   mpbi
  # so this line of reasoning means that x * y != 2
  x y mulcom (+ (1) (1)) eqeq1i biimpi (+ (+ (1) (1)) (1)) leeq2d    mtbiri  con2i  syl

  # y=0 can't give us x*y = 2
    0ne2
    y (0) x muleq2    x pa_ax5  syl6eq  (+ (1) (1)) eqeq1d  biimpd
  mtoi

  # x=0 can't give us x*y = 2 either
    0ne2
    x (0) y muleq1   y pa_ax5r  syl6eq  (+ (1) (1)) eqeq1d  biimpd
  mtoi

  # That's all the math -- from here on out it's juggling predicates, connectives, and quantifiers.
  # If the verifier autounified I wouldn't have to carry around all the mandhyps baggage.
  # Instead I tried to tuck most of it away in a lemma.
  2primelem1

  (1) x eqcom   (= (+ (1) (1)) x) orbi1i  sylib
  (+ (1) (1)) x eqcom (= x (1)) orbi2i sylib
  y 19.22i
  y (\/ (= x (1)) (= x (+ (1) (1)))) 19.9  sylib
  sylbi x gen 


  (+ (1) (1)) x df-prime   mpbir
)
# number 46.0
thm (dividesmul () () 
    (-> (| A B) (| A (* B C)))
  A B x df-divides biimpi

   y (* x C) tyex
   y (* x C) A muleq2   y 19.22i
  ax-mp

  (* A x) B C muleq1
  A x C mulass  syl5eqr
  (* A y) eqeq2d
  biimpd

  y 19.21ai    y (= (* A y) (* A (* x C))) (= (* A y) (* B C)) 19.22 syl

  mpi
  x 19.22i syl
  x (E. y (= (* A y) (* B C))) 19.9   biimpi  syl

  A (* B C) y df-divides   biimpri   syl
)

# number 47.0
# Induction tool for exfactorial
thm (exfactoriallem1 ((A x) (A y)) ()
    (-> (= z A)
        (<-> (E. x (A. y (-> (<= (S (S y)) (S (S z))) (| (S (S y)) (S (S x))))))
             (E. x (A. y (-> (<= (S (S y)) (S (S A))) (| (S (S y)) (S (S x))))))))
 
   (= z A) id  suceqd      (= (S z) (S A)) id  suceqd  syl
   (= (S (S z)) (S (S A))) id (S (S y)) leeq2d syl
   (| (S (S y)) (S (S x))) imbi1d
   y 19.21ai
   19.15d
   x exbid
)

# number 48.0
thm (divideseq2imp () ()
  (-> (= A B) (-> (| C A) (| C B)))

  
  A B (* C z) eqeq2    biimpd
  z 19.22d
  C B z df-divides biimpri    syl6

  C A z df-divides biimpi

  syl5
)
# number 49.0
thm (divideseq2 () ()
  (-> (= A B) (<-> (| C A) (| C B)))
   A B C divideseq2imp
   B A C divideseq2imp eqcoms
  impbid
)

# number 50.0
thm (eq0le0 () () (<-> (= A (0)) (<= A (0)))
     A (0) lesym 
     # 0 <= A
     (0) A addge01t    A pa_ax3r (0) leeq2i     mpbi 
   mpbiran2
)
# number 51.0
thm (dividessym () () (| A A)
    x (1) tyex
    x (1) A muleq2  eqcomd  A mulid  eqcomi syl5eq   eqcomd  x 19.22i
  ax-mp
  A A x df-divides
  mpbir
)
# number 52.0
# Base case for induction in exfactorial
thm (exfactoriallem2 () () 
  (E. x (A. y (-> (<= (S (S y)) (S (S (0)))) (| (S (S y)) (S (S x))))))

  x (0) tyex

  # (for later)
    (S (S (0))) dividessym
  # Prove y''<= 0'' -> y'' = 0''
    y (0) (1) leadd1
    y a1suc (+ (0) (1)) leeq1i
  bitr4i
  (S y) (+ (0) (1)) (1) leadd1 bitri
  (S y) a1suc (+ (+ (0) (1)) (1)) leeq1i  bitr4i
  (+ (0) (1)) a1suc (S (S y)) leeq2i bitr4i
  (0) a1suc     (S (0)) (+ (0) (1)) pa_ax2  mpbi   (S (S y)) leeq2i bitr4i
  biimpri 
  y eq0le0 sylibr
  suceqd suceqd

  # ... -> y'' | 0''  (it's later)
    (S (S y)) (S (S (0))) (S (S (0))) divideseq1  syl  biimprd
  mpi

  # ... which is the same as y'' | x'' when x=0
     (= x (0)) a1i
     x (0) eqcom biimpi suceqd suceqd    (S (S (0))) (S (S x)) (S (S y)) divideseq2   syl  biimpd
  syld

  y 19.21ai 
  x 19.22i ax-mp  
)
# number 53.0
# Utility to avoid excessive mandhyp baggage in exfactoriallem3
thm (exfactoriallem4 () 
  (h1 (-> ph (\/ ps ch)) 
   h2 (-> th ps))
  (-> (-> ch th) (-> ph ps)) 

  h1
  (-> ch th) anim1i 
  ps ch (-> ch th) andir  sylib
  ps (-> ch th) pm3.26   (/\ ch (-> ch th)) orim1i  syl
  ch th pm3.35  ps orim2i syl
  h2 ps orim2i syl
  ps oridm sylib
  expcom
)
# number 54.0
# Inductive step for exfactorial
thm (exfactoriallem3 () () 
  (-> (E. x (A. y (-> (<= (S (S y)) (S (S z))) (| (S (S y)) (S (S x))))))
      (E. x (A. y (-> (<= (S (S y)) (S (S (S z)))) (| (S (S y)) (S (S x)))))))

  # Set up the two cases
    (S (S y)) (S (S (S z))) lefoo3 biimpi

  # first case: y'' = z'''.  This becomes y'' | z''' * x''
  (S (S (S z))) dividessym    (S (S (S z))) (S (S (S z))) (S (S x)) dividesmul ax-mp
  (S (S y)) (S (S (S z)))  (* (S (S (S z))) (S (S x))) divideseq1  mpbiri
  (<= (+ (S (S y)) (1)) (S (S (S z)))) orim1i syl

  # Second case: y'' + 1 <= z'''.  This becomes y'' <= z''
  (S (S y)) (S (S z)) (1) leadd1
  (S (S z)) a1suc   (+ (S (S y)) (1)) leeq2i  bitr4i biimpri 
  (| (S (S y)) (* (S (S (S z))) (S (S x)))) orim2i syl
  # Handle second case by adding an assumption
    (S (S y)) (S (S x)) (S (S (S z)))  dividesmul
      (S (S x)) (S (S (S z))) mulcom
    (* (S (S x)) (S (S (S z)))) (* (S (S (S z))) (S (S x))) (S (S y)) divideseq2  ax-mp sylib
  exfactoriallem4

  # So (z''' * x'') is our new x''... we need to show it is at least 2
    (S (S (S z))) (S x) pa_ax6   
    (* (S (S (S z))) (S x)) (S (S z)) pa_ax4 eqtr
      (* (S (S (S z))) (S x)) (S z) pa_ax4  
      (+ (* (S (S (S z))) (S x)) (S (S z))) (S (+ (* (S (S (S z))) (S x)) (S z))) pa_ax2 mpbi
    eqtr
      (* (S (S (S z))) (S (S x))) (S (S (+ (* (S (S (S z))) (S x)) (S z)))) (S (S y)) divideseq2   
    ax-mp
  biimpi  (<= (S (S y)) (S (S (S z)))) imim2i syl

  # Bundle up...
  y 19.20i
  x 19.22i

  # for later still
    x' (+ (* (S (S (S z))) (S x)) (S z)) tyex
  # Need an substitution: x -> (z''' * x' + z')
      x' (+ (* (S (S (S z))) (S x)) (S z)) pa_ax2 biimpi suceqd
        (S (S x')) (S (S (+ (* (S (S (S z))) (S x)) (S z)))) (S (S y)) divideseq2  biimprd  
        (| (S (S y)) (S (S (+ (* (S (S (S z))) (S x)) (S z))))) (| (S (S y)) (S (S x'))) (<= (S (S y)) (S (S (S z)))) imim2 syl
        y 19.21ai
        y (-> (<= (S (S y)) (S (S (S z)))) (| (S (S y)) (S (S (+ (* (S (S (S z))) (S x)) (S z)))))) (-> (<= (S (S y)) (S (S (S z)))) (| (S (S y)) (S (S x')))) ax-alim syl
      syl
      com12
      x' 19.22d
    mpi
    x 19.22i
  syl
  x (E. x' (A. y (-> (<= (S (S y)) (S (S (S z)))) (| (S (S y)) (S (S x')))))) 19.9 sylib
  # now alpha change x' back to x
    x' x pa_ax2 biimpi suceqd 
    (S (S x')) (S (S x)) (S (S y)) divideseq2 biimpd  syl
    (| (S (S y)) (S (S x'))) (| (S (S y)) (S (S x))) (<= (S (S y)) (S (S (S z)))) imim2 syl
    y 19.21ai 
    y (-> (<= (S (S y)) (S (S (S z)))) (| (S (S y)) (S (S x')))) (-> (<= (S (S y)) (S (S (S z)))) (| (S (S y)) (S (S x)))) ax-alim syl
    exalpha1
  syl
)
# number 55.0
thm (exfactorial ((A x) (A y)) ()
    (E. x (A. y (-> (<= (S (S y)) (S (S A)))
                     (| (S (S y)) (S (S x))))))
    z (0) x y exfactoriallem1
    z y' x y exfactoriallem1
    z (S y') x y exfactoriallem1
    z A x y exfactoriallem1
    x y exfactoriallem2
    x y y' exfactoriallem3
    finds
)
# number 56.0
thm (primeeq () () (-> (= A B) (<-> (prime A) (prime B)))
    A B x divideseq2 
      A B x eqeq2
      (= x (1)) orbi2d
    imbi12d
    x 19.21ai
    19.15d

      A x df-prime
        B x df-prime
    3bitr4g
)
# number 57.0
thm (dividesle () () (-> (| A (S B)) (<= A (S B)))
    A (S B) x df-divides biimpi
        B pa_ax1
            x (0) A muleq2    A pa_ax5  syl6eq
            (* A x) (0) (S B) eqeq1   syl   biimpd   con3d
        mpi
        con2i
            x y lefoo
            (= x (0)) (E. y (= (+ (1) y) x)) df-or   biimpi    ax-mp
        syl
            y a1suc   y (1) addcom     eqtr     x eqeq1i   biimpri  
            (S y) x A muleq2    syl
            (* A (S y)) (* A x) (S B) eqeq1    syl  biimprd
                A (* A y) addge01t  
                    A y pa_ax6    (* A y) A  addcom eqtr   (S B) eqeq1i   biimpi    A leeq2d  biimpd
                mpi
            syl6
        y 19.22i    syl
        y (-> (= (* A x) (S B)) (<= A (S B))) 19.9  sylib
        pm2.43i
    x 19.22i syl
    x (<= A (S B)) 19.9 sylib
)
# number 58.0
thm (sindlem1 () 
  (h1 (-> ch (-> ps (\/ (-> th ph) ta)))
   h2 (-> si (/\ th (-> ta ph))))
  (-> si (-> ch (-> ps ph)))

  si ch pm3.2
  h2   h1    anim12i    syl6

  (/\ th (-> ta ph))  ps  ax-1    (-> ps (\/ (-> th ph) ta))  anim1i    syl6
  ps  (/\ th (-> ta ph))  (\/ (-> th ph) ta)  pm3.43    syl6

  th  (-> ta ph)  (\/ (-> th ph) ta)  anass    biimpi    syl8
  

    (-> ta ph)  (-> th ph)  ta  andi    biimpi
    (-> ta ph)  (-> th ph)  pm3.27    (/\ (-> ta ph) ta)  orim1i    syl
    (-> ta ph)  ta  ancom    biimpi   (-> th ph)  orim2i    syl 
    th  anim2i
  syl8

  ta  ph  pm3.35    (-> th ph)  orim2i    th  anim2i    syl8

  th  (-> th ph)  ph  andi    biimpi    th  ph  pm3.27    (/\ th (-> th ph)) orim2i    syl    syl8
  
  th  ph  pm3.35    ph  orim1i    syl8

  ph  pm1.2    syl8
)
# number 59.0
# Strong Induction.
thm (sind ((A x) (ta x) (ph y))                    # ph(x) is some term in x; ph(A) is to be proved
  (hyp1 (-> (= x (0))   (<-> ph ps))               # ps is ph(0)
   hyp3 (-> (= x (S y)) (<-> ph th))               # th is ph(y')
   hyp4 (-> (= x A)     (<-> ph ta))               # ta is ph(A)
   hyp5 ps
   hyp6 (-> (A. x (-> (<= x y) ph)) th))           # ph(x) holds for all x<=y  -->  ph(y') holds 
  ta

# Tuck this away for later
hyp4
  z  x  tyex    x  leid    (= z x)  id    x  leeq2d    biimprd    mpi    z 19.22i    ax-mp

    # Don't blink, or you'll miss the actual math content of this proof.
    (= z (S y)) id    x leeq2d    biimpd
       x (S y) lefoo3    biimpi
       y a1suc (+ x (1)) leeq2i  biimpi    x y (1) leadd1  sylibr (= x (S y)) orim2i syl
    syl6 
    # That was it!  All that's left is a little bit of logic and a lot of juggling.
    hyp3    biimprd  (<= x y) orim1i    syl6
#      x  ph  ps  19.21    biimpri
        z y tyex
          (= z y) id   x leeq2d    biimprd    (<= x y) (<= x z) ph imim1    syl   x  19.21ai    
          x  (-> (<= x z) ph)  (-> (<= x y) ph)  ax-alim    syl  
          a2i    z 19.20i 
          z  (= z y)  (A. x (-> (<= x y) ph))  19.22    syl
        mpi    z  (A. x (-> (<= x y) ph))  ex-nf    syl   
#.     syl .
      # Now the logic is all done, and we just need to juggle.
      # We'll need to use the consequent "x<=y -> ph" twice, so duplicate it here
      (A. z (-> (= z y) (A. x (-> (<= x z) ph))))  (A. x (-> (<= x y) ph))  anidmdbi  biimpri  ax-mp
      # Grind the first one into a theta
      hyp6    (A. x (-> (<= x y) ph))  anim1i  syl 
      # Pull the quantifier off the second one
      x  (-> (<= x y) ph)  ax-4    th  anim2i    syl
    # Juggling lematized for your convenience
    sindlem1
 
    x    19.21ai    x  (= z (S y))  (-> (<= x z) ph)  19.21    sylib
    z  19.21ai
    y  gen

        # Base case
        (= z (0)) id    x leeq2d    biimpd   x eq0le0 biimpri    hyp5 hyp1 mpbiri   syl  syl6    x 19.21ai    z gen 
            # Instead of calling "x  ph  y pa_ind" as in finds, we call it like this:
            z  (A. x (-> (<= x z) ph))  y  pa_ind
        mpan
    ax-mp

    # Huzzah!  Now just some cleanup.
    a4i    a4i
  z 19.22i    ax-mp    z  ph  ex-nf    ax-mp
vtocl
)

# number 59.5
thm (not0divides () () (-. (| (0) (S A)))
  A pa_ax1
    (0)  (S A)  x  df-divides    biimpi
    x  pa_ax5   x  (0)  mulcom    eqtr3    (S A)  eqeq1i    biimpri    x 19.22i    syl
    x  (= (0) (S A))  ex-nf    syl
  mto
)
# number 60.0

# Every multitude has either a proper multitude divisor or a prime multitude divisor
thm (primedivisor.1 ((A x) (A z)) () 
    (\/ (E. z (/\ (< (S (S z)) (S (S A))) (| (S (S z)) (S (S A)))))
        (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S A))))))

# Case 1: A'' is itself prime
x (prime (S (S A))) 19.3  biimpri
  x A tyex
    (= x A) id suceqd suceqd
    (S (S x)) (S (S A)) primeeq biimprd    syl
      (= x A) id suceqd suceqd
      (S (S x)) (S (S A)) (S (S A)) divideseq1   syl  biimprd
    anim12d
      (S (S A)) dividessym   (prime (S (S A))) jctr
    syl5    com12
    x 19.20i
    x (= x A) (/\ (prime (S (S x))) (| (S (S x)) (S (S A)))) 19.22  syl
  mpi
syl

# Case 2: A'' is not prime.
  (S (S A)) x df-prime   notbii  biimpi
  (-> (| x (S (S A))) (\/ (= x (1)) (= x (S (S A))))) notnot  biimpri   x 19.20i    con3i   syl
  x (-. (-> (| x (S (S A))) (\/ (= x (1)) (= x (S (S A)))))) df-ex  sylibr
  (| x (S (S A))) (\/ (= x (1)) (= x (S (S A)))) pm4.61   biimpi  x 19.22i   syl

    x (S A) dividesle
      (= x (1)) (= x (S (S A))) ioran  biimpi  
    anim12i  ancomd
    (-. (= x (1))) (-. (= x (S (S A)))) (<= x (S (S A)))  anass sylib 
    x (S (S A)) df-lt    biimpri  ancoms  (-. (= x (1))) anim2i   syl
    (| x (S (S A)))  (-. (\/ (= x (1)) (= x (S (S A)))))  (/\ (-. (= x (1))) (< x (S (S A))))  pm5.3    mpbi
    (| x (S (S A))) (-. (= x (1))) (< x (S (S A))) anass    biimpri    syl
        (S A)  not0divides    x  (0)  (S (S A))  divideseq1    biimpd    mtoi    con2i
         x 0orpos    ori    syl    
         (1)  x  y  df-le    biimpi    y a1suc    y  (1)  addcom    eqtr    x  eqeq1i    biimpri    y  19.22i    syl    syl             
         (-. (= x (1)))  anim1i   
         y  (= (S y) x)  (-. (= x (1)))  19.41    sylibr
           (S y)  x  (1)  eqeq1    biimpd    con3d    (= (S y) x)  (-. (= x (1)))  (-. (= (S y) (1)))  pm3.31    ax-mp  
           (= y (0))  id   suceqd    df-1    syl6eqr    con3i    y 0orpos    ori    syl    syl
               (1)  y  z  df-le    biimpi    z a1suc    z  (1)  addcom    eqtr    y  eqeq1i    biimpri    (= (S z) y)  id    suceqd   syl    eqcomd
           z  19.22i    syl    syl
        (= (S y) x)  (-. (= x (1)))  (E. z (= (S y) (S (S z))))  pm5.3    mpbi    y  19.22i    syl 

        z  (= (S y) (S (S z)))  (= (S y) x)  19.41    biimpri    ancoms     y  19.22i   syl  
        (S y)  (S (S z))  x  ax-eqtr     z  19.22i    y  19.22i    syl
        y  (E. z (= (S (S z)) x))  ex-nf    syl 
        (| x (S (S A)))  (-. (= x (1)))  (E. z (= (S (S z)) x))  pm5.3    mpbi    ancomd 
        z  (= (S (S z)) x)  (| x (S (S A)))  19.41    sylibr  
          (S (S z))  x  (S (S A))  divideseq1    biimprd    (= (S (S z)) x)  (| x (S (S A)))  (| (S (S z)) (S (S A)))  pm3.31    ax-mp    
          (= (S (S z)) x)  (| x (S (S A)))  (| (S (S z)) (S (S A)))  pm5.3    mpbi
        z  19.22i   syl 
     (< x (S (S A)))   anim1i    syl  
     z  (/\ (= (S (S z)) x) (| (S (S z)) (S (S A))))  (< x (S (S A)))  19.41    sylibr
       (= (S (S z)) x)  (| (S (S z)) (S (S A)))  (< x (S (S A)))  an23    (= (S (S z))  x)  id    (S (S A))  lteq1d    biimprd 
          (= (S (S z)) x)  (< x (S (S A)))  (< (S (S z)) (S (S A)))  pm3.31    ax-mp    (| (S (S z)) (S (S A))) anim1i
       sylbi
     z 19.22i    syl
   x  19.22i    syl
   x  (E. z (/\ (< (S (S z)) (S (S A))) (| (S (S z)) (S (S A)))))  ex-nf    syl
nsyl4    orri
)
# number 61.0
# Induction tool
thm (primedivisor.2 ((A x)) () 
    (-> (= y A) (<-> (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S y)))))
                     (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S A)))))))
    (= y A)  id    suceqd    suceqd
    (S (S y))  (S (S A)) (S (S x))  divideseq2    syl
    (prime (S (S x)))  anbi2d
    x exbid
)

# number 62.0
thm (lesuc1 () () 
  (<-> (<= A B) (<= (S A) (S B)))
  A  B  (1)  leadd1
  A  a1suc    (+ B (1))  leeq1i    bitr4i
  B  a1suc    (S A)  leeq2i    bitr4i
)
# number 63.0
thm (dividestr () () 
  (-> (/\ (| A B) (| B C)) (| A C))
    A  B  x  df-divides    biimpi
        B  C  y  df-divides    biimpi
    anim12i
    x  (= (* A x) B)  (E. y (= (* B y) C))  19.41    sylibr
    y  (= (* B y) C)  (= (* A x) B)  19.41    biimpri    ancoms    x 19.22i    syl
        (* A x)  B  y  muleq1     C  eqeq1d    biimprd
        (= (* A x) B)  (= (* B y) C)  (= (* (* A x) y) C)  pm3.31    ax-mp        
        ancoms A  x  y  mulass    syl5eqr    z 19.21ai
            z  (* x y)  tyex
            z  (* x y)  A  muleq2    C  eqeq1d    biimprd    z  19.22i    ax-mp    
            z  (= (* A (* x y)) C)  (= (* A z) C)  eximp1    ax-mp
        syl
    y  19.22i    x  19.22i    syl
    19.9d    19.9d
    A  C  z  df-divides    sylibr
)
# number 64.0
thm (primedivisor ((A x)) () 
    (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S A)))))

x' (0)  x  primedivisor.2
  x' (S y)  x  primedivisor.2 
    x'  A  x  primedivisor.2

      # Base case
      x  (0)  tyex
        2prime
          df-1    (1)  (S (0))  pa_ax2    mpbi   (1)  a1suc    eqtr3    (S (S (0))) (+ (1) (1)) primeeq    ax-mp
        mpbir
        (= x (0))  id    suceqd    suceqd    (S (S x))  (S (S (0)))  primeeq    syl    biimprd    mpi
          (S (S (0)))  dividessym
          (= x (0))  id    suceqd    suceqd    (S (S x))  (S (S (0)))  (S (S (0))) divideseq1   syl    biimprd    mpi
        jca
      x  19.22i    ax-mp

        # Inductive step
        x' (S y) x primedivisor.1  
          (S (S x'))  (S (S y))  lesuc    biimpi 
          (S x')  (S y)  lesuc1    sylibr    x'  y  lesuc1    sylibr
          (| (S (S x')) (S (S (S y))))  anim1i
        x'  19.22i    (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S (S y))))))  orim1i    ax-mp
          (<= x' y)  (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S x')))))  (| (S (S x')) (S (S (S y))))  pm3.45   
          x'  19.20i  x'  (/\ (<= x' y) (| (S (S x')) (S (S (S y)))))  (/\ (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S x'))))) (| (S (S x')) (S (S (S y))))) 19.22    syl  
        (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S (S y))))))   orim1d    mpi
          (S (S x))  (S (S x'))  (S (S (S y)))  dividestr    (prime (S (S x)))  anim2i
          anassrs    x  19.22i 
          x  (/\ (prime (S (S x))) (| (S (S x)) (S (S x'))))  (| (S (S x')) (S (S (S y))))  19.41    (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S (S y)))))) imbi1i    mpbi
        x'  19.22i    19.9d            
        (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S (S y))))))  orim1i    syl
        (E. x (/\ (prime (S (S x))) (| (S (S x)) (S (S (S y))))))  pm1.2  syl    
        sind
)

# number 65.0
thm (lemul4 () () 
  (-> (<= (* A (S C)) (* B (S C)))  (<= A B))
  A  B  lenltt    biimpri   con1i
  B  A  df-lt    sylib
  B  A  x  df-le    biimpi    (-. (= B A)) anim1i    syl
  x  (= (+ B x) A)  (-. (= B A))  19.41    biimpri    syl
      x  (0)  B  addeq2    B  pa_ax3    syl6eq    A  eqeq1d    biimpd    com12    con3d
      (= (+ B x) A)  (-. (= B A))  (-. (= x (0)))    pm3.31    ax-mp
        (+ B x)  A  (S C)  muleq1
        (+ B x)  (S C)  mulcom    (S C)  B  x  distr   eqtr    
        (S C)  B  mulcom    (* (S C) x)  addeq1i    eqtr    syl5eqr
        (-. (= B A)) adantr
      jca
      x  y  lefoo      ori
          z  (* (1) C)tyex 
            z  (* (1) C)  (1) addeq2
            (1)  C  pa_ax6    (1)  (S C)  mulcom    eqtr3    (* (1) C)  (1)  addcom    eqtr3  eqcomi    syl6eq
          z  19.22i    ax-mp
          (1)  (* (S C) (1))  z  df-le    mpbir
          (1)  (* (S C) (1))  (* (S C) y)  leadd1    mpbi
            (+ (1) y)  x  (S C)  muleq2    (S C)  (1)  y  distr    syl5eqr
            (+ (1) (* (S C) y))  leeq2d    biimpd
          mpi
            (1)  (* (S C) y)  addge01t    (1)  (+ (1) (* (S C) y))  (* (S C) x)  letr 
            (<= (1) (+ (1) (* (S C) y)))  (<= (+ (1) (* (S C) y)) (* (S C) x))  (<= (1) (* (S C) x))  pm3.3    ax-mp    ax-mp
          syl
      y  19.22i    syl    y  (<= (1) (* (S C) x))  19.9    sylib
      (1)  (* (S C) x)  (* B (S C))  leadd2    sylib
      (= (+ (* B (S C)) (* (S C) x)) (* A (S C)))  id    (+ (* B (S C)) (1))  leeq2d    biimpd    anim12i
     (<= (+ (* B (S C)) (1)) (+ (* B (S C)) (* (S C) x)))  (<= (+ (* B (S C)) (1)) (* A (S C)))  pm3.35    syl
    syl
  x  19.22i    syl    x  (<= (+ (* B (S C)) (1)) (* A (S C)))  19.9    sylib
  (* B (S C))  (* A (S C))  nnltp1let    biimpri    syl
  (* A (S C))  (* B (S C))  lenltt    biimpi    con2i    syl
  con4i
)
# number 66.0
thm (dividesadd.1 () ()
    (-> (| (S A) (+ (* (S A) B) C)) (| (S A) C))
    (S A)  (+ (* (S A) B) C)  x  df-divides    biimpi
        (* (S A) B)  C  addge01t
        ( = (* (S A) x) (+ (* (S A) B) C))  id  (* (S A) B)  leeq2d    biimprd    mpi
        (S A)  B  mulcom    (* (S A) x)  leeq1i    sylib
        (S A)  x  mulcom    (* B (S A))  leeq2i    sylib
        B  A  x  lemul4    syl
        B  x  y  df-le    sylib
        (+ B y)  x  (S A)  muleq2    eqcomd   y  19.22i    syl  
        ancri  
        y  (= (* (S A) x) (* (S A) (+ B y)))  (= (* (S A) x) (+ (* (S A) B) C))  19.41    sylibr
          (* (S A) x)  (* (S A) (+ B y))  (+ (* (S A) B) C)  ax-eqtr
          (S A)  B  y  distr    (+ (* (S A) B) C)  eqeq1i    sylib
          (* (S A) B)  (* (S A) y)  C  addcan2    biimpi    syl
                
        y  19.22i    syl
        (S A)  C  y  df-divides    sylibr

    x  19.22i   syl    x  (| (S A) C) 19.9    sylib
)
# number 67.0
thm (divides1 () ()
     (-. (| (S (S A)) (1)))
  A  pa_ax1    df-1  (S (S A))  leeq2i      (S A)  (0)  lesuc1    bitr4i    (S A)  eq0le0    bitr4i    biimpi   eqcomd  con3i  ax-mp
    (S (S A))  (1)  x  df-divides    biimpi
        x  z  lefoo
          0ne1
            x  (0)  (S (S A))  muleq2    (S (S A)) pa_ax5    syl6eq
            (1) eqeq1d    biimpd    con3d
          mpi    (E. z (= (+ (1) z) x))  orim1i
        ax-mp
        (= (* (S (S A)) x) (1))  (E. z (= (+ (1) z) x))  imor    biimpri    ax-mp
        ancli
        (+ (1) z)  x  (S (S A)) muleq2    (1)  eqeq1d    biimprd    z  19.22i    (= (* (S (S A)) x) (1))  anim2i    syl
        ancomd    z  (-> (= (* (S (S A)) x) (1)) (= (* (S (S A)) (+ (1) z)) (1)))  (= (* (S (S A)) x) (1))  19.41    sylibr
        (= (* (S (S A)) x) (1))  (= (* (S (S A)) (+ (1) z)) (1))  pm3.35    ancoms    z  19.22i    syl
    x  19.22i    syl    x  (E. z (= (* (S (S A)) (+ (1) z)) (1)))  19.9    sylib
      x  (* (S (S A)) z) tyex 
       x  (* (S (S A)) z)  (S (S A)) addeq2    (1)  eqeq1d    biimprd
        (S (S A))  (1)  z  distr    (1)  eqeq1i   biimpi
        (S (S A))  mulid    (* (S (S A)) z)  addeq1i      syl5eqr
       syl5com
      x  19.22d    mpi
      (S (S A))  (1)  x  df-le    biimpri    syl
    z  19.22i    syl    z  (<= (S (S A)) (1)) 19.9    sylib
    con3i  
  ax-mp
)
# number 67.0

# number 68.0
thm (dividesadd.2 () () 
  (-> (| (S A) B) (-> (| (S A) (+ B C)) (| (S A) C)))
    (S A)  B  x  df-divides    biimpi
        (* (S A) x)  B  C  addeq1    
        (+ (* (S A) x) C)  (+ B C)  (S A)  divideseq2    biimprd    syl
         A  x  C  dividesadd.1    syl6
    x  19.22i    syl
    x  (-> (| (S A) (+ B C)) (| (S A) C))  ex-nf    syl
)
# number 69.0
thm (suceqi () (h (= A B))  (= (S A) (S B))
    h    (= A B)  id    suceqd    ax-mp
)
# number 70.0
thm (infprime.1 ((A x)) () (E. x (/\ (< (S (S A)) (S (S x))) (prime (S (S x))))) 
    y  x  A  exfactorial
        x  divides1    
        (S x) (S (S y)) (1)  dividesadd.2     con3d    mpi
            (<= (S (S x)) (S (S A))) imim2i    con2d   (S (S x))  (S (S A))  lenltt   biimpri
        con1i    syl6
     x  19.20i       y  19.22i    ax-mp
        x  (+ y (1))  primedivisor
            (S y)  (1)  pa_ax4r    y  (1)  pa_ax4r    suceqi    eqtr    
            (+ (S (S y)) (1))  (S (S (+ y (1))))  (S (S x))  divideseq2    ax-mp    biimpri
            (prime (S (S x)))  anim2i
        x  19.22i    ax-mp  
        y  gen
    pm3.2i
    y  (A. x (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x)))))  (A. y (E. x (/\ (prime (S (S x))) (| (S (S x)) (+ (S (S y)) (1))))))  19.41    mpbir
    y  (E. x (/\ (prime (S (S x))) (| (S (S x)) (+ (S (S y)) (1)))))  ax-4    (A. x (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x)))))  anim2i    y  19.22i    ax-mp
    x  (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x))))  (/\ (prime (S (S x))) (| (S (S x)) (+ (S (S y)) (1))))  19.29    y  19.22i    ax-mp
        
            (| (S (S x)) (+ (S (S y)) (1)))  (< (S (S A)) (S (S x)))  pm2.27    (prime (S (S x)))  anim2i     (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x))))  anim2i    
                (prime (S (S x)))  (-> (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x)))) (< (S (S A)) (S (S x))))  ancom    biimpi    (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x))))  anim2i  
            (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x))))  (-> (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x)))) (< (S (S A)) (S (S x))))  (prime (S (S x)))    anass    sylibr    syl
            (-> (| (S (S x)) (+ (S (S y)) (1))) (< (S (S A)) (S (S x))))  (< (S (S A)) (S (S x)))  pm3.35    (prime (S (S x)))  anim1i    syl
    x  19.22i    y  19.22i    ax-mp
    y  (E. x (/\ (< (S (S A)) (S (S x))) (prime (S (S x)))))  19.9    mpbi
)
  
# number 71.0
thm (infprime ((A x)) () (E. x (/\ (< A x) (prime x)))

y  A  infprime.1
 (/\ (< (S (S A)) (S (S y))) (prime (S (S y))))  x  alnfi
  x  (S (S y))  tyex
    (= x (S (S y)))  id    (S (S A))  lteq2d    biimprd
    x  (S (S y)) primeeq    biimprd  anim12d
  x  19.22i    ax-mp   
  x  (/\ (< (S (S A)) (S (S y))) (prime (S (S y))))  (/\ (< (S (S A)) x) (prime x))  eximp1    ax-mp
 syl
y  19.22i    ax-mp
y  (E. x (/\ (< (S (S A)) x) (prime x)))  19.9  mpbi

    (+ A (1)) (1) addge01t
    A  (+ (+ A (1)) (1))  nnltp1let    mpbir
    A  a1suc    suceqi    (+ A (1))  a1suc    eqtr    A  lteq2i    mpbir
    A  (S (S A))  x  lttr  mpan
    (prime x)  anim1i    
x  19.22i    ax-mp
)
# number 72.0
thm (sqrteu ((A x)) () (E! x (/\ (<= (* x x) A) (< A (* (S x) (S x)))))
    y  A  sqrt
        y  A  x  sqrtuniq    ex    y  x  eqcom    syl6ib
            y  x  y  x  muleq12    anidms    A  leeq1d   eqcoms 
                x  y  eqcom    biimpi   suceqd    x  y  eqcom   biimpi suceqd    muleq12d    A  lteq2d
            anbi12d    biimpd    com12
        impbid    x  19.21ai
        y  19.22i    ax-mp
        x  (/\ (<= (* x x) A) (< A (* (S x) (S x))))  y  df-eu    biimpri 
    ax-mp
)
# number 73.0
thm (abeq ((ph y) (ps x))
  (h1 (-> (= x y) (<-> ph ps)))
  (=_ ({|} x ph) ({|} y ps))
  z  x  ph  ax-elab
  z  x  ph  y' df-subst    bitri
      z  y  ps  ax-elab
      z  y  ps  y' df-subst    bitri
          x  y  y'  ax-eqtr    ex
          y  x  y'  ax-eqtr    ex    eqcoms  impbid
          h1    anbi12d
          exalpha
          (= y' z)  anbi2i
          y'  exbii
      bitr4i
  bitr4i
  eqri
)
# number 74.0
thm (df-sqrt-just ((A x) (A y)) ()
(= (iota ({|} x (/\ (<= (* x x) A) (< A (* (S x) (S x))))))
   (iota ({|} y (/\ (<= (* y y) A) (< A (* (S y) (S y)))))))
    y  x  y  x  muleq12    anidms    A  leeq1d   eqcoms 
    x  y  eqcom    biimpi   suceqd    x  y  eqcom   biimpi suceqd    muleq12d    A  lteq2d 
    anbi12d    bicomd    #  rwffi    abid
   abeq    ({|} x (/\ (<= (* x x) A) (< A (* (S x) (S x)))))  ({|} y (/\ (<= (* y y) A) (< A (* (S y) (S y)))))  ax-iotaeq     ax-mp
)
defthm  (df-sqrt num (sqrt A) ((A x)) ()
  (= (sqrt A)  (iota ({|} x (/\ (<= (* x x) A) (< A (* (S x) (S x)))))))
  y  A  x  df-sqrt-just)
# number 75.0
thm (abeq2 () () 
    (-> (A. x (<-> ph ps)) (=_ ({|} x ph) ({|} x ps)))
    x  (<-> ph ps)  ax-4
    y  x  sbcbid
    y  x  ph  ax-elab    syl5bb
    y  x  ps  ax-elab    syl6bbr
    y  19.21ai   ({|} x ph)  ({|} x ps)  y  df-seq    biimpri    syl
)
# number 76.0
thm (syl6seqr ()
  (hyp1 (-> ph (=_ S T))
   hyp2 (=_ U T))
  (-> ph (=_ S U))
  hyp1    S  T  x  df-seq    sylib    
  x  (<-> (e. x S) (e. x T))  ax-4    syl
      hyp2    U  T  x  df-seq    mpbi    a4i
  syl6bbr    
  x  19.21ai
  S  U  x  df-seq       sylibr    
)
# number 77.0
thm (sqrteq () () (-> (= A B) (= (sqrt A) (sqrt B)))
  (= A B)  id    (* x x)  leeq2d  
  (= A B)  id    (* (S x) (S x))  lteq1d    anbi12d
  x  19.21ai
  x  (/\ (<= (* x x) A) (< A (* (S x) (S x))))  (/\ (<= (* x x) B) (< B (* (S x) (S x))))  abeq2    syl
  ({|} x (/\ (<= (* x x) A) (< A (* (S x) (S x)))))  ({|} x (/\ (<= (* x x) B) (< B (* (S x) (S x)))))  ax-iotaeq    syl
 
  B  x  df-sqrt  syl6eqr
  A  x  df-sqrt  syl5eq
)
  
# number 78.0
thm (opeq2 () () (-> (= A B) (= (<,> C A) (<,> C B)))
  A  B  C  addeq2  
  A  B  C  addeq2  jca
  (+ C A)  (+ C B)  (+ C A)  (+ C B)  muleq12    syl  
  ancri
  (* (+ C A) (+ C A))  (* (+ C B) (+ C B))  A  B  addeq12    syl
  C  A  df-op       syl5eq    
  C  B  df-op       syl6eqr
)
# number 78.5
thm (opeq1 () () (-> (= A B) (= (<,> A C) (<,> B C)))
    A  B  C  addeq1    A  B  C  addeq1    jca
    (+ A C) (+ B C) (+ A C) (+ B C) muleq12    syl
    C  addeq1d
        A  C  df-op
    syl5eq
    B  C  df-op   syl6eqr    
)
# number 79.0
thm (df-tail-just ((A x) (A y') (A y) (A z)) ()
    (= (iota ({|} x (E. y (= (<,> y x) A))))
       (iota ({|} z (E. y' (= (<,> y' z) A)))))
  x  z  y  opeq2  A  eqeq1d    y  exbid  
  y  y'  z  opeq1    A  eqeq1d   exalpha   syl6bb    abeq
  ({|} x (E. y (= (<,> y x) A)))  ({|} z (E. y' (= (<,> y' z) A)))    ax-iotaeq    ax-mp
)
defthm  (df-tail num (tail A) ((A x) (A y')) ()
  (= (tail A)  (iota ({|} x (E. y' (= (<,> y' x) A)))))
  z  y  A  x  y'  df-tail-just)

# number 80.0
thm (tailop () () (= (tail (<,> A B)) B)
  (<,> A B)  x  z  df-tail
    z  x  A  B  opth    z  exbii   
    z  (= z A)  (= x B)  19.41   bitri    
    z  A  tyex    (E. z (= z A))  (= x B)  ibar    ax-mp    bitr4i
    x  gen    x  (E. z (= (<,> z x) (<,> A B)))  (= x B)  abeq2    ax-mp
    ({|} x (E. z (= (<,> z x) (<,> A B))))  ({|} x (= x B))  ax-iotaeq    ax-mp
  eqtr
  B  x df-sn    ({} B)  ({|} x (= x B))  ax-iotaeq    ax-mp    eqtr4
  B  ax-iota    eqtr
)
# number 81.0
thm (df-head-just ((A x) (A y') (A y) (A z)) ()
    (= (iota ({|} x (E. y (= (<,> x y) A))))
       (iota ({|} z (E. y' (= (<,> z y') A)))))
  x  z  y  opeq1  A  eqeq1d    y  exbid  
  y  y'  z  opeq2    A  eqeq1d   exalpha   syl6bb    abeq
  ({|} x (E. y (= (<,> x y) A)))  ({|} z (E. y' (= (<,> z y') A)))   ax-iotaeq    ax-mp
)
defthm  (df-head num (head A) ((A x) (A y')) ()
  (= (head A)  (iota ({|} x (E. y' (= (<,> x  y') A)))))
  z  y  A  x  y'  df-head-just)
 
# number 82.0
thm (19.41l ((ph x)) ()
  (<-> (E. x (/\ ph ps)) (/\ ph (E. x ps)))
  ph  ps  ancom    x  exbii
  x  ps  ph  19.41    bitri
  (E. x ps)  ph  ancom    bitri
)
# number 82.0
thm (19.41r ((ph x)) ()
  (<-> (E. x (/\ ph ps)) (/\ ph (E. x ps)))
  ph  ps  ancom    x  exbii
  x  ps  ph  19.41    bitri
  (E. x ps)  ph  ancom    bitri
)
# number 83.0
thm (headop () () (= (head (<,> A B)) A)
  (<,> A B)  x  z  df-head


    x  z  A  B  opth    z  exbii   
    z  (= x A)  (= z B)  19.41r   bitri    
    z  B  tyex    (E. z (= z B))  (= x A)  iba    ax-mp    bitr4i
    x  gen    x  (E. z (= (<,> x z) (<,> A B)))  (= x A)  abeq2    ax-mp
    ({|} x (E. z (= (<,> x z) (<,> A B))))  ({|} x (= x A))  ax-iotaeq    ax-mp
  eqtr
  A  x df-sn    ({} A)  ({|} x (= x A))  ax-iotaeq    ax-mp    eqtr4
  A  ax-iota    eqtr
)

# number 84.0
thm (eualpha ((ph y) (ps x)) (h1 (-> (= x y) (<-> ph ps)))
     (<-> (E! x ph) (E! y ps))
    h1
      x  y  z  eqeq1
    bibi12d    alpha
    z  exbii
        x  ph  z  df-eu
          y  ps  z  df-eu
        bibi12i    biimpri
    ax-mp
)
# number 85.0
thm (eubid ((ph x))
  (hyp (-> ph (<-> ps ch)))
  (-> ph (<-> (E! x ps) (E! x ch)))
  hyp   (= x z)  bibi1d    
  x  19.21ai       19.15d     z  exbid    
  x  ps  z  df-eu   syl5bb    
  x  ch  z  df-eu      syl6bbr    
)
# number 86.0
thm (df-fun-just ((S x) (S y) (S x') (S y')) ()
  (<-> (A. x  (E! y  (e. (<,> x  y ) S)))
       (A. x' (E! y' (e. (<,> x' y') S))))
  x  x'  y'  opeq1    (<,> x y')  (<,> x' y')  S  ax-eleq1  syl    y'  eubid
    y  y'  x  opeq2     (<,> x y)  (<,> x y')  S  ax-eleq1    syl    eualpha
  syl5bb    
  alpha
)

defthm (df-fun wff (fun S) ((S x) (S y))  ()
  (<-> (fun S) (A. x (E! y (e. (<,> x y) S))))
x' y' S x y df-fun-just)

# number 87.0
thm (df-min-just ((S x) (S y) (S x') (S y')) ()
  (= (iota ({|} x (/\ (e. x S) (A. y (-> (e. y S) (<= x y))))))
     (iota ({|} x' (/\ (e. x' S) (A. y' (-> (e. y' S) (<= x' y')))))))
x  x'  S  ax-eleq1
  (= x x')  id    y  leeq1d    (e. y S)  imbi2d   y  19.21ai    
  y  (-> (e. y S) (<= x y))  (-> (e. y S) (<= x' y))  19.15    syl
    y  y'  S  ax-eleq1
      (= y y')  id    x'  leeq2d
    imbi12d   alpha
  syl6bb
anbi12d    
abeq
({|} x (/\ (e. x S) (A. y (-> (e. y S) (<= x y)))))  ({|} x' (/\ (e. x' S) (A. y' (-> (e. y' S) (<= x' y')))))    ax-iotaeq    ax-mp   
)


defthm  (df-min num (min S) ((S x) (S y)) ()
        (= (min S) (iota ({|} x (/\ (e. x S) (A. y (-> (e. y S) (<= x y)))))))
          x' S y' x y df-min-just)

# number 88.0
thm (mineq () () (-> (=_ S T) (= (min S) (min T)))
  S  T  x  df-seq    biimpi    x  (<-> (e. x S) (e. x T))  ax-4    syl
    S  T  y  df-seq    biimpi    y  (<-> (e. y S) (e. y T))  ax-4    syl
    (<= x y)  imbi1d    
    y  19.21ai    
    19.15d
  anbi12d    
  x  19.21ai
  x  (/\ (e. x S) (A. y (-> (e. y S) (<= x y))))  (/\ (e. x T) (A. y (-> (e. y T) (<= x y))))  abeq2    syl
  ({|} x (/\ (e. x S) (A. y (-> (e. y S) (<= x y)))))  ({|} x (/\ (e. x T) (A. y (-> (e. y T) (<= x y)))))  ax-iotaeq    syl

  S  x  y  df-min    syl5eq    
  T  x  y  df-min    syl6eqr
)
# number 89.0
thm (df-mod-just ((A x y x' y') (B x y x' y')) ()
  (= (min ({|} x (E. y (= (+ (* B y) x) A))))
     (min ({|} x' (E. y' (= (+ (* B y') x') A)))))
  x  x'  (* B y)  addeq2    A  eqeq1d     y  exbid    
    y  y'  B  muleq2    x'  addeq1d    A  eqeq1d    exalpha
  syl6bb    
  abeq
  ({|} x (E. y (= (+ (* B y) x) A)))  ({|} x' (E. y' (= (+ (* B y') x') A)))  mineq    ax-mp
)


defthm  (df-mod num (mod A B) ((A x y) (B x y)) ()
        (= (mod A B) (min ({|} x (E. y (= (+ (* B y) x) A)))))
          x'  y'  B  A  x  y df-mod-just)

# number 90.0
thm (addeq2d () (h (-> ph (= A B))) (-> ph (= (+ C A) (+ C B)))
    h
    A  B  C  addeq2  syl
)
# number 91.0

thm (df-gcd-just ((A v w x y z v' w' x' y' z') (B v w x y z v' w' x' y' z')) ()
(= (min ({|} z (/\ (-. (= z (0)))
                (E. v (E. w (E. x (E. y (= (+ (* v A) (* w B))
                                            (+ (+ (* x A) (* y B)) z)))))))))
(min ({|} z' (/\ (-. (= z' (0)))
              (E. v' (E. w' (E. x' (E. y' (= (+ (* v' A) (* w' B))
                                           (+ (+ (* x' A) (* y' B)) z'))))))))))
z  z'  (0)  eqeq1   notbid    

  z  z'  (+ (* x' A) (* y' B))  addeq2    (+ (* v' A) (* w' B))  eqeq2d  y'  exbid  x'  exbid  w'  exbid  v'  exbid
    v  v'  A  muleq1  (* w' B)  addeq1d  (+ (+ (* x' A) (* y' B)) z)  eqeq1d    y'  exbid  x'  exbid  w'  exbid
      w  w'  B  muleq1    (* v A)  addeq2d    (+ (+ (* x' A) (* y' B)) z)  eqeq1d    y'  exbid    x'  exbid
        x  x'  A  muleq1    (* y' B)  addeq1d    z  addeq1d    (+ (* v A) (* w B))  eqeq2d  y'  exbid    
            y  y'  B  muleq1    (* x A)  addeq2d    z  addeq1d    (+ (* v A) (* w B))  eqeq2d    exalpha        
        syl5bb    exalpha
      syl5bb    exalpha
    syl5bb    exalpha
  syl5bb

anbi12d    
abeq  
({|} z (/\ (-. (= z (0))) (E. v (E. w (E. x (E. y (= (+ (* v A) (* w B)) (+ (+ (* x A) (* y B)) z))))))))  ({|} z' (/\ (-. (= z' (0))) (E. v' (E. w' (E. x' (E. y' (= (+ (* v' A) (* w' B)) (+ (+ (* x' A) (* y' B)) z'))))))))  mineq  ax-mp
)

defthm  (df-gcd num (gcd A B) ((A v w x y z) (B v w x y z)) ()
        (= (gcd A B) (min ({|} z (/\ (-. (= z (0)))
                (E. v (E. w (E. x (E. y (= (+ (* v A) (* w B))
                                            (+ (+ (* x A) (* y B)) z))))))))))
          z' v' w' x' y' A B z v w x y df-gcd-just)

# number 92.0

thm (minex.1 () () 
  (-> (= y y')
    (<->
      (-> (e. y ({|} x ph)) (/\ (e. (min ({|} x ph)) ({|} x ph))
                                (<= (min ({|} x ph)) y)))
      (-> (e. y' ({|} x ph)) (/\ (e. (min ({|} x ph)) ({|} x ph))
                                 (<= (min ({|} x ph)) y')))))

y  y'  ({|} x ph)  ax-eleq1
  (= y y')  id    (min ({|} x ph))  leeq2d    (e. (min ({|} x ph)) ({|} x ph)) anbi2d
  imbi12d    
)
# number 94.0
thm (alan1 ((ph x)) () (<-> (A. x (/\ ph ps)) (/\ ph (A. x ps)))
    ph  ps  pm3.26 x  19.20i    x  ph  19.3    sylib
    ph  ps  pm3.27  x  19.20i   jca       
      ph  ps  ibar   x  19.21ai       19.15d         biimpa    
    impbii
)
# number 95.0
thm (alan2 ((ps x)) () (<-> (A. x (/\ ph ps)) (/\ (A. x ph) ps))
  ph  ps  ancom     x  albii    x  ps  ph  alan1  bitri  
  ps  (A. x ph)  ancom    bitri
)
